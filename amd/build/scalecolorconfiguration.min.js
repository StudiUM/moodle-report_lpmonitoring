define ("report_lpmonitoring/scalecolorconfiguration",["jquery","core/templates","core/ajax","core/notification","core/str","report_lpmonitoring/fieldsettoggler","report_lpmonitoring/bootstrap-colorpicker"],function(a,b,c,d,e,f){var g=function(b,c,d){this.frameworkSelector=b;this.scaleSelector=c;this.scaleValuesSelector=d;a(b).on("change",this.frameworkChangeHandler.bind(this)).change();a(c).on("change",this.scaleChangeHandler.bind(this)).change();a(document).on("submit","#savecolor",this.saveHandler.bind(this));f.init()};g.prototype.frameworkid=null;g.prototype.scaleid=null;g.prototype.frameworkSelector=null;g.prototype.scaleSelector=null;g.prototype.scaleValuesSelector=null;g.prototype.frameworkChangeHandler=function(b){var f=this,g;f.frameworkid=a(b.target).val();if(""!==f.frameworkid){a(f.scaleSelector).prop("disabled",!1);f.updateScaleHeader();a("#loaderscale").show();g=c.call([{methodname:"report_lpmonitoring_get_scales_from_framework",args:{competencyframeworkid:f.frameworkid}}]);g[0].done(function(b){f.buildScaleOptions(b);f.updateScaleHeader();f.loadScaleConfiguration();a("#loaderscale").hide();a("#id_scale").show()}).fail(d.exception)}else{e.get_string("noscaleavailable","report_lpmonitoring").done(function(b){a(f.scaleSelector).prop("disabled",!0);a(f.scaleSelector+" option").remove();a(f.scaleSelector).append(a("<option>").text(b).val(""));f.updateScaleHeader();a("#loaderscale").hide();a("#id_scale").hide()})}};g.prototype.updateScaleHeader=function(){var b=document.getElementById("scaleselector"),c=b.options[b.selectedIndex].text;e.get_string("colorsforscale","report_lpmonitoring",c).done(function(b){a("#scaleheader").text(b)})};g.prototype.buildScaleOptions=function(b){var c=this;a(c.scaleSelector+" option").remove();a.each(b,function(b,d){a(c.scaleSelector).append(a("<option>").text(d.name).val(d.id))});c.scaleid=a(c.scaleSelector+" option:first-child").attr("value")};g.prototype.scaleChangeHandler=function(b){var c=this;c.scaleid=a(b.target).val();if(c.scaleid){a(c.scaleSelector).prop("disabled",!1);c.updateScaleHeader();a("#loaderscalevalues").show();c.loadScaleConfiguration()}else{a(c.scaleValuesSelector).hide();a("#loaderscalevalues").hide()}};g.prototype.loadScaleConfiguration=function(){var e=this,f;a(".scalevalue").colorpicker("destroy");a("#loaderscalevalues").show();a("#submitScaleColorButton").prop("disabled",!0);a(e.scaleValuesSelector).hide();f=c.call([{methodname:"report_lpmonitoring_read_report_competency_config",args:{competencyframeworkid:e.frameworkid,scaleid:e.scaleid}}]);f[0].done(function(c){return b.render("report_lpmonitoring/scalecolorconfigurationdetail",c).done(function(c,d){a(e.scaleValuesSelector).html(c);b.runTemplateJS(d);a("#loaderscalevalues").hide();a(e.scaleValuesSelector).show();a(".scalevalue").colorpicker();a("#submitScaleColorButton").prop("disabled",!1)})}).fail(d.exception)};g.prototype.saveHandler=function(){var b=[],f=0,g="0",h,i=this,j;f=1;a("#savecolor input[type=text]").each(function(){if(""!==a(this).val()){b.push({id:f,color:a(this).val()});f++}});b=JSON.stringify(b);g=a("#savecolor input[name=configid]").val();if("0"===g){h="report_lpmonitoring_create_report_competency_config"}else{h="report_lpmonitoring_update_report_competency_config"}j=c.call([{methodname:h,args:{competencyframeworkid:i.frameworkid,scaleid:i.scaleid,scaleconfiguration:b}}]);j[0].done(function(b){if("0"===g){a("#savecolor input[name=configid]").val(b.id)}var c=document.getElementById("scaleselector"),f=c.options[c.selectedIndex].text;e.get_string("colorsforscalesaved","report_lpmonitoring",f).done(function(b){a(".alert-success .close").trigger("click");d.addNotification({message:b,type:"success"});a("html, body").animate({scrollTop:0},500)}).fail(d.exception)}).fail(d.exception);return!1};return{init:function init(a,b,c){return new g(a,b,c)}}});
//# sourceMappingURL=scalecolorconfiguration.min.js.map
