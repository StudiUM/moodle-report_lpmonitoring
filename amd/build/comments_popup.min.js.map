{"version":3,"sources":["../src/comments_popup.js"],"names":["define","$","notification","str","ajax","templates","Dialogue","CommentsPopup","selector_button","selector_nbcomments","planid","self","on","handleClick","bind","prototype","selector_commentlist","popup","actual_size","e","preventDefault","call","methodname","args","done","commentareaLoaded","fail","exception","commentarea","render","html","js","get_string","title","open","close","checkPopupSize","runTemplateJS","requests","then","text","count","off","newSize","height","bb","yuiDialogue","get","addClass","setStyles","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to show a popup to view or add comments to a learning plan.\n *\n * @package    report_lpmonitoring\n * @author     Marie-Eve Lévesque <marie-eve.levesque.8@umontreal.ca>\n * @copyright  2019 Université de Montréal\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery',\n        'core/notification',\n        'core/str',\n        'core/ajax',\n        'core/templates',\n        'tool_lp/dialogue'],\n    function($, notification, str, ajax, templates, Dialogue) {\n\n        /**\n         * Constructor.\n         *\n         * @param {String} selector_button The CSS selector used to find triggers for the new dialogue.\n         * @param {string} selector_nbcomments The CSS selector used to display the new number of comments for the plan.\n         * @param {int} planid The learning plan id.\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var CommentsPopup = function(selector_button, selector_nbcomments, planid) {\n            var self = this;\n            self.planid = planid;\n            self.selector_nbcomments = selector_nbcomments;\n\n            $(selector_button).on('click', this.handleClick.bind(this));\n        };\n\n        /**\n         * @var {int} planid\n         * @private\n         */\n        CommentsPopup.prototype.planid = -1;\n\n        /**\n         * @var {string} selector_nbcomments  The CSS selector used to display the new number of comments for the plan.\n         * @private\n         */\n        CommentsPopup.prototype.selector_nbcomments = '';\n\n        /**\n         * @var {string} selector_commentlist  The CSS selector for the comment list.\n         * @private\n         */\n        CommentsPopup.prototype.selector_commentlist = \".moodle-dialogue-wrap .comment-list\";\n\n        /**\n         * @var {Dialogue} popup  The popup window (Dialogue).\n         * @private\n         */\n        CommentsPopup.prototype.popup = null;\n\n        /**\n         * @var float actual_size  The size of the comment area.\n         * @private\n         */\n        CommentsPopup.prototype.actual_size = 0;\n\n        /**\n         * Get the data from the clicked cell and open the popup.\n         *\n         * @method _handleClick\n         * @param {Event} e\n         */\n        CommentsPopup.prototype.handleClick = function(e) {\n            e.preventDefault();\n            var self = this;\n            ajax.call([{\n                methodname : 'report_lpmonitoring_get_comment_area_for_plan',\n                args: { planid: self.planid },\n                done: self.commentareaLoaded.bind(self),\n                fail: notification.exception\n            }]);\n        };\n\n        /**\n         * We loaded the commentarea, now render the template.\n         *\n         * @method commentareaLoaded\n         * @param {Object} commentarea\n         */\n        CommentsPopup.prototype.commentareaLoaded = function(commentarea) {\n            var self = this;\n            // We have to display user info in popup.\n            templates.render('report_lpmonitoring/comment_area', commentarea).done(function(html, js) {\n                str.get_string('commentsedit', 'report_lpmonitoring').done(function(title) {\n                    self.popup = new Dialogue(title, html, self.open.bind(self, js), self.close.bind(self), true);\n                    $(\"body\").on('DOMSubtreeModified', self.selector_commentlist, self.checkPopupSize.bind(self));\n                }).fail(notification.exception);\n            }).fail(notification.exception);\n        };\n\n        /**\n         * Open the popup.\n         *\n         * @method open\n         */\n        CommentsPopup.prototype.open = function(js) {\n            templates.runTemplateJS(js);\n        };\n\n        /**\n         * Close the popup and update comment count.\n         *\n         * @method close\n         */\n        CommentsPopup.prototype.close = function() {\n            // Update the comment count.\n            var self = this;\n            var requests = ajax.call([{\n                methodname : 'report_lpmonitoring_get_comment_area_for_plan',\n                args: { planid: self.planid },\n                fail: notification.exception\n            }]);\n\n            requests[0].then(function (commentarea) {\n                $(self.selector_nbcomments).text(commentarea.count);\n            });\n\n            // Destroy the popup.\n            $(\"body\").off('DOMSubtreeModified', self.selector_commentlist);\n            self.popup.close();\n            self.popup = null;\n        };\n\n        /**\n         * Checks if all comments can be seen in the popup, and if not, show the popup full screen.\n         *\n         * @method checkPopupSize\n         */\n        CommentsPopup.prototype.checkPopupSize = function() {\n            var self = this;\n\n            var newSize = $(self.selector_commentlist).height();\n            // If the height of the comment area has changed and is bigger than before.\n            if( newSize > self.actual_size ) {\n                var bb = self.popup.yuiDialogue.get('boundingBox');\n\n                // If the comments cannot be completly seen in the window, show fullscreen.\n                if( $('.moodle-dialogue').height() > bb.get('winHeight')) {\n                    bb.addClass('moodle-dialogue-fullscreen');\n\n                    bb.setStyles({'left': null,\n                        'top': null,\n                        'width': null,\n                        'height': null,\n                        'right': null,\n                        'bottom': null});\n                }\n            }\n            self.actual_size = newSize;\n        };\n\n        return {\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector_button The CSS selector used to find nodes that will trigger this module.\n             * @param {string} selector_nbcomments The CSS selector used to display the new number of comments for the plan.\n             * @param {int} planid The learning plan id.\n             * @return {CommentsPopup} A new instance of CommentsPopup.\n             */\n            init: function(selector_button, selector_nbcomments, planid) {\n                return new CommentsPopup(selector_button, selector_nbcomments, planid);\n            }\n        };\n    });"],"file":"comments_popup.min.js"}