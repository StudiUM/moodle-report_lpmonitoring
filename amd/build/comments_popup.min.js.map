{"version":3,"sources":["../src/comments_popup.js"],"names":["define","$","notification","str","ajax","templates","ModalFactory","ModalEvents","CommentsPopup","selector_button","selector_nbcomments","planid","self","on","handleClick","bind","prototype","popup","actual_size","e","preventDefault","trigger","target","requests","call","methodname","args","when","apply","then","context","commentareaLoaded","catch","exception","commentarea","get_string","done","title","create","type","types","DEFAULT","body","render","large","modal","getRoot","hidden","close","focusContentItem","show","fail","item","is","focus","find","first","open","js","runTemplateJS","text","count","destroy","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to show a popup to view or add comments to a learning plan.\n *\n * @module     report_lpmonitoring/comments_popup\n * @author     Marie-Eve Lévesque <marie-eve.levesque.8@umontreal.ca>\n * @copyright  2019 Université de Montréal\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery',\n        'core/notification',\n        'core/str',\n        'core/ajax',\n        'core/templates',\n        'core/modal_factory',\n        'core/modal_events'],\n    function($, notification, str, ajax, templates, ModalFactory, ModalEvents) {\n\n        /**\n         * Constructor.\n         *\n         * @param {String} selector_button The CSS selector used to find triggers for the new dialogue.\n         * @param {string} selector_nbcomments The CSS selector used to display the new number of comments for the plan.\n         * @param {int} planid The learning plan id.\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var CommentsPopup = function(selector_button, selector_nbcomments, planid) {\n            var self = this;\n            self.planid = planid;\n            self.selector_nbcomments = selector_nbcomments;\n\n            $(selector_button).on('click', this.handleClick.bind(this));\n        };\n\n        /**\n         * @var {int} planid\n         * @private\n         */\n        CommentsPopup.prototype.planid = -1;\n\n        /**\n         * @var {string} selector_nbcomments  The CSS selector used to display the new number of comments for the plan.\n         * @private\n         */\n        CommentsPopup.prototype.selector_nbcomments = '';\n\n        /**\n         * @var {Dialogue} popup  The popup window (Dialogue).\n         * @private\n         */\n        CommentsPopup.prototype.popup = null;\n\n        /**\n         * @var float actual_size  The size of the comment area.\n         * @private\n         */\n        CommentsPopup.prototype.actual_size = 0;\n\n        /**\n         * Get the data from the clicked cell and open the popup.\n         *\n         * @method _handleClick\n         * @param {Event} e\n         */\n        CommentsPopup.prototype.handleClick = function(e) {\n            e.preventDefault();\n            var trigger = $(e.target);\n            var self = this;\n            var requests = ajax.call([{\n                methodname : 'report_lpmonitoring_get_comment_area_for_plan',\n                args: { planid: self.planid }\n            }]);\n            $.when.apply($, requests).then(function(context) {\n                self.commentareaLoaded.bind(this)(context, trigger);\n                return;\n            }.bind(this)).catch(notification.exception);\n        };\n\n        /**\n         * We loaded the commentarea, now render the template.\n         *\n         * @method commentareaLoaded\n         * @param {Object} commentarea\n         * @param {Object} trigger\n         */\n        CommentsPopup.prototype.commentareaLoaded = function(commentarea, trigger) {\n            var self = this;\n            // We have to display user info in popup.\n            return str.get_string('commentsedit', 'report_lpmonitoring').done(function(title) {\n                return ModalFactory.create({\n                    type: ModalFactory.types.DEFAULT,\n                    title: title,\n                    body: templates.render('report_lpmonitoring/comment_area', commentarea),\n                    large: true\n                }).done(function(modal) {\n                    // Keep a reference to the modal.\n                    self.popup = modal;\n                    modal.getRoot().on(ModalEvents.hidden, function() {\n                        self.close();\n                        self.focusContentItem(trigger);\n                    }.bind(this));\n                    self.popup.show();\n                }.bind(this));\n        }).fail(notification.exception);\n        };\n\n        /**\n         * Focus the given content item or the first focusable element within\n         * the content item.\n         *\n         * @method focusContentItem\n         * @param {object} item The content item jQuery element\n         */\n        CommentsPopup.prototype.focusContentItem = function(item) {\n            var focusable = 'input:not([type=\"hidden\"]), a[href], button, textarea, select, [tabindex]';\n            if (item.is(focusable)) {\n                item.focus();\n            } else {\n                item.find(focusable).first().focus();\n            }\n        };\n\n        /**\n         * Open the popup.\n         *\n         * @param {String} js\n         * @method open\n         */\n        CommentsPopup.prototype.open = function(js) {\n            templates.runTemplateJS(js);\n        };\n\n        /**\n         * Close the popup and update comment count.\n         *\n         * @method close\n         */\n        CommentsPopup.prototype.close = function() {\n            // Update the comment count.\n            var self = this;\n            var requests = ajax.call([{\n                methodname : 'report_lpmonitoring_get_comment_area_for_plan',\n                args: { planid: self.planid },\n                fail: notification.exception\n            }]);\n\n            requests[0].then(function (commentarea) {\n                $(self.selector_nbcomments).text(commentarea.count);\n            });\n            self.popup.destroy();\n            self.popup = null;\n        };\n\n        return {\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector_button The CSS selector used to find nodes that will trigger this module.\n             * @param {string} selector_nbcomments The CSS selector used to display the new number of comments for the plan.\n             * @param {int} planid The learning plan id.\n             * @return {CommentsPopup} A new instance of CommentsPopup.\n             */\n            init: function(selector_button, selector_nbcomments, planid) {\n                return new CommentsPopup(selector_button, selector_nbcomments, planid);\n            }\n        };\n    });"],"file":"comments_popup.min.js"}