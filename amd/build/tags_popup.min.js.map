{"version":3,"sources":["../src/tags_popup.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Notification","TagsPopup","selector_button","selector_nbtags","contextid","planid","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","on","shown","setBody","hidden","destroy","bodyRendered","find","addClass","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","frag","loadFragment","e","preventDefault","formData","serialize","tagspopup","promises","call","methodname","args","done","response","text","hide","fail","exp","exception","submit"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage tags for a learning plan popup.\n *\n * @module     report_lpmonitoring/tags_popup\n * @author     Marie-Eve Lévesque <marie-eve.levesque.8@umontreal.ca>\n * @copyright  2019 Université de Montréal\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/notification'],\n    function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Notification) {\n\n        /**\n         * Constructor.\n         *\n         * @param {String} selector_button The CSS selector used to find triggers for the new group modal.\n         * @param {string} selector_nbtags The CSS selector used to display the new number of tags for the plan.\n         * @param {int} contextid\n         * @param {int} planid The learning plan id.\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var TagsPopup = function(selector_button, selector_nbtags, contextid, planid) {\n            this.contextid = contextid;\n            this.planid = planid;\n            this.selector_nbtags = selector_nbtags;\n            this.init(selector_button);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        TagsPopup.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        TagsPopup.prototype.contextid = -1;\n\n        /**\n         * @var {int} planid\n         * @private\n         */\n        TagsPopup.prototype.planid = -1;\n\n        /**\n         * @var {string} selector_nbtags  The CSS selector used to display the new number of tags for the plan.\n         * @private\n         */\n        TagsPopup.prototype.selector_nbtags = '';\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector_button The CSS selector used to find triggers for the modal.\n         * @private\n         * @return {Promise}\n         */\n        TagsPopup.prototype.init = function(selector_button) {\n            var triggers = $(selector_button);\n            // Fetch the title string.\n            return Str.get_string('tagsedit', 'report_lpmonitoring').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody()\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.setBody(this.getBody());\n                }.bind(this));\n\n                modal.getRoot().on(ModalEvents.hidden, function() {\n                    modal.destroy();\n                }.bind(this));\n\n                // We want to hide the submit buttons of the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.bodyRendered, function() {\n                    this.modal.getRoot().find('[data-groupname=buttonar]').addClass('hidden');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         * @param {Object} formdata\n         * @private\n         * @return {Promise}\n         */\n        TagsPopup.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata), planid: this.planid, contextid: this.contextid};\n            var frag = Fragment.loadFragment('report_lpmonitoring', 'tags', this.contextid, params);\n            return frag;\n        };\n\n        /**\n         * Submit the form via ajax.\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        TagsPopup.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            var tagspopup = this;\n            var promises = Ajax.call([{\n                methodname: 'report_lpmonitoring_submit_manage_tags_form',\n                args: {\n                    contextid: this.contextid,\n                    jsonformdata: JSON.stringify(formData)\n                }\n            }]);\n\n            promises[0].done(function(response) {\n                $(tagspopup.selector_nbtags).text(response);\n                tagspopup.modal.hide();\n            }).fail(function(exp) {\n                Notification.exception(exp);\n                // We should re-display the form with errors but since there is no real validation, it is not necessary.\n            });\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        TagsPopup.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector_button The CSS selector used to find nodes that will trigger this module.\n             * @param {string} selector_nbtags The CSS selector used to display the new number of tags for the plan.\n             * @param {int} contextid The contextid.\n             * @param {int} planid The learning plan id.\n             * @return {TagsPopup} A new instance of TagsPopup.\n             */\n            init: function(selector_button, selector_nbtags, contextid, planid) {\n                return new TagsPopup(selector_button, selector_nbtags, contextid, planid);\n            }\n        };\n    });"],"file":"tags_popup.min.js"}