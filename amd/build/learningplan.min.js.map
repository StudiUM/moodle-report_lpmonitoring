{"version":3,"file":"learningplan.min.js","sources":["../src/learningplan.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Learning plan report navigation.\n *\n * @module     report_lpmonitoring/learningplan\n * @author     Issam Taboubi <issam.taboubi@umontreal.ca>\n * @copyright  2016 Université de Montréal\n */\n\ndefine(['jquery',\n    'core/templates',\n    'core/ajax',\n    'core/notification',\n    'core/str',\n    'core/chartjs',\n    'core/form-autocomplete',\n    'core/modal_factory',\n    'core/modal_events',\n    'report_lpmonitoring/user_competency_popup',\n    'tool_lp/grade_user_competency_inline',\n    'report_lpmonitoring/fieldsettoggler',\n    'report_lpmonitoring/colorcontrast',\n    'report_lpmonitoring/paginated_datatable',\n    'report_lpmonitoring/resetgrade_dialogue'],\n    function($, templates, ajax, notification, str, Chart, autocomplete, ModalFactory, ModalEvents,\n        Popup, InlineGrader, fieldsettoggler,\n        colorcontrast, DataTable, ResetGradeDialogue) {\n\n        /**\n         * Learning plan report.\n         * @param {Boolean} userview True if the report is for user view (student).\n         * @param {Boolean} cmcompgradingenabled True if grading in course module competency is enabled.\n         */\n        var LearningplanReport = function(userview, cmcompgradingenabled) {\n            this.userView = userview || false;\n            this.cmcompgradingEnabled = cmcompgradingenabled || false;\n\n            // Init the form filter.\n            this.initPage();\n\n            // Init the color contrast object.\n            this.colorContrast = colorcontrast.init();\n\n            // Init User competency page popup.\n            var learningplan = this;\n            var popup = new Popup('[data-region=list-competencies-section]', '[data-user-competency=true]');\n            // Override the after show refresh method of the user competency popup.\n            popup._refresh = function() {\n                var self = this;\n                learningplan.reloadCompetencyDetail(self._competencyId, self._userId, self._planId);\n                self.close();\n            };\n\n            $(this.templateSelector).on('change', this.templateChangeHandler.bind(this)).change();\n            $(this.learningplanSelector).on('change', this.learningplanChangeHandler.bind(this)).change();\n            $(this.studentSelector).on('change', this.studentChangeHandler.bind(this)).change();\n            $(this.studentPlansSelector).on('change', this.studentPlansChangeHandler.bind(this)).change();\n            $(this.tagSelector).on('change', this.tagChangeHandler.bind(this)).change();\n            $(this.learningplanTagSelector).on('change', this.learningplanTagChangeHandler.bind(this)).change();\n            $(this.learningplanTagCommentsSelector).on('change', this.learningplanTagChangeHandler.bind(this)).change();\n\n            $('.competencyreport').on('change',\n                '.scalefiltercontainer input[name=\"optionscalefilter\"]',\n                this.changeScaleApplyHandler.bind(this)).change();\n            $('.competencyreport').on('change',\n                '.scalesortordercontainer input[name=\"optionscalesortorder\"]',\n                this.changeScaleSortorderHandler.bind(this)).change();\n            $('.competencyreport').on('change', '.scalefiltervalues', this.changeScaleHandler.bind(this)).change();\n            $('.competencyreport input[name=optionfilter]').prop(\"disabled\", false);\n            $('.competencyreport input[name=optionscalesortorder]').prop(\"disabled\", false);\n            // Display rating in user plan.\n            $(\".competencyreport\").on(\"change\", \".displayratings input[type=checkbox]\",\n                this.changeDisplayRating.bind(this)).change();\n            // Only plans with comments filter.\n            $('.competencyreport').on('change', '#filter-comment', this.changeWithcommentsHandler.bind(this)).change();\n            // Only students with at least two plans.\n            $('.competencyreport').on('change', '#filter-plan', this.changeWithplansHandler.bind(this)).change();\n            // When the tags are modified we reload the tags filter.\n            $(\".competencyreport\").on('DOMSubtreeModified', \".tags-stats\", this.reloadTagsIfNeeded.bind(this));\n            // When the comments is checked we modify the tags filter.\n            // Only plans with comments filter and tags.\n            $('.competencyreport').on('change', '#filter-comments', this.reloadTagsIfNeeded.bind(this));\n\n        };\n\n        /** @var {Number} The template ID. */\n        LearningplanReport.prototype.templateId = null;\n        /** @var {Boolean} If report is for user view */\n        LearningplanReport.prototype.userView = false;\n        /** @var {Number} The learning plan ID from template. */\n        LearningplanReport.prototype.learningplanId = null;\n        /** @var {Number} The learning plan ID from student. */\n        LearningplanReport.prototype.studentLearningplanId = null;\n        /** @var {Number} The learning plan ID from tag. */\n        LearningplanReport.prototype.tagLearningplanId = null;\n        /** @var {String} The selected tag ID. */\n        LearningplanReport.prototype.tagId = null;\n        /** @var {Number} The user ID. */\n        LearningplanReport.prototype.userId = null;\n        /** @var {Boolean} If template option is selected. */\n        LearningplanReport.prototype.templateSelected = null;\n        /** @var {Boolean} If student option is selected. */\n        LearningplanReport.prototype.studentSelected = null;\n        /** @var {Array} Competencies informations. */\n        LearningplanReport.prototype.competencies = {};\n        /** @var {String} Scales values filter. */\n        LearningplanReport.prototype.scalesvaluesSelected = null;\n        /** @var {ColorContrast} ColorContrast object instance. */\n        LearningplanReport.prototype.colorcontrast = null;\n        /** @var {String} Apply scale filters on grade in plan, course or course module. */\n        LearningplanReport.prototype.scalefilterin = '';\n        /** @var {String} Apply scale sortorder. */\n        LearningplanReport.prototype.scalesortorder = 'ASC';\n        /** @var {String} Apply filter for only plans with comments. */\n        LearningplanReport.prototype.withcomments = false;\n        /** @var {String} Apply filter for only students with at least two plans. */\n        LearningplanReport.prototype.withplans = false;\n        /** @var {Boolean} Is course module competency grading enabled. */\n        LearningplanReport.prototype.cmcompgradingEnabled = false;\n\n        /** @var {String} The template select box selector. */\n        LearningplanReport.prototype.templateSelector = \"#templateSelectorReport\";\n        /** @var {String} The learning plan select box selector. */\n        LearningplanReport.prototype.learningplanSelector = '#learningplanSelectorReport';\n        /** @var {String} The student selector. */\n        LearningplanReport.prototype.studentSelector = '#studentSelectorReport';\n        /** @var {String} The student plans selector. */\n        LearningplanReport.prototype.studentPlansSelector = '#studentPlansSelectorReport';\n        /** @var {String} The tag select box selector. */\n        LearningplanReport.prototype.tagSelector = \"#tagSelectorReport\";\n        /** @var {String} The learning plan with this tag select box selector. */\n        LearningplanReport.prototype.learningplanTagSelector = '#learningplanTagSelectorReport';\n        /** @var {String} */\n        LearningplanReport.prototype.learningplanTagCommentsSelector = '#filter-comments';\n\n        /** @var {Boolean} Indicate that the tags are currently loading, to prevent loading them twice at the same time. */\n        LearningplanReport.prototype.tagsAreLoading = false;\n\n        /** @var {String} Active tab course or course module. */\n        LearningplanReport.prototype.compDetailActiveTab = null;\n\n        /**\n         * Triggered when a template is selected.\n         *\n         * @name   templateChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.templateChangeHandler = function(e) {\n            var self = this;\n            self.templateId = $(e.target).val();\n            $(self.learningplanSelector).data('templateid', self.templateId);\n            $(self.learningplanSelector).data('scalefilter', '');\n            $(self.learningplanSelector).data('scalesortorder', '');\n            self.resetUserUsingLPTemplateSelection();\n            self.learningplanId = null;\n            if (self.templateId !== '') {\n                $('.competencyreport .moreless-actions').removeClass('hidden');\n                if ($('.competencyreport .show-toggler').hasClass('hidden')) {\n                    $('.competencyreport .advanced').show();\n                }\n                self.loadScalesFromTemplate(self.templateId);\n                self.disableUserTemplateSelector(false);\n            } else {\n                $('.competencyreport .moreless-actions').addClass('hidden');\n                $('.competencyreport .advanced').hide();\n                $('.competencyreport #scale').empty();\n                self.disableUserTemplateSelector(true);\n            }\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Load the tags list from the webservice.\n         *\n         * @name   loadTags\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.loadTags = function() {\n            var self = this;\n            if (self.tagsAreLoading === false) {\n                self.tagsAreLoading = true;\n                $(self.tagSelector + ' option').remove();\n\n                var promise = ajax.call([{\n                    methodname: 'report_lpmonitoring_search_tags_for_accessible_plans',\n                    args: {\n\n                    }\n                }]);\n\n                promise[0].then(function(results) {\n                    str.get_string('selecttag', 'report_lpmonitoring').done(\n                        function(selecttag) {\n                            $(self.tagSelector).append($('<option>').text(selecttag).val(''));\n\n                            $.each(results, function(index, tag) {\n                                $(self.tagSelector).append($('<option>').text(tag.tag).val(tag.id));\n                            });\n\n                            // Select the option that was selected before.\n                            var optionExists = ( $(self.tagSelector + \" option[value=\" + self.tagId + \"]\").length > 0 );\n                            if (optionExists === true) {\n                                $(self.tagSelector).val(self.tagId);\n                            } else {\n                                self.tagId = null;\n                                self.tagLearningplanId = null;\n                            }\n\n                            // Simulate a change to reload the learning plans associated to the tag.\n                            $(self.tagSelector).change();\n                            self.tagsAreLoading = false;\n                        }\n                    );\n                }).fail(\n                    function(exp) {\n                        notification.exception(exp);\n                        self.tagsAreLoading = false;\n                    }\n                );\n            }\n        };\n\n        /**\n         * Triggered when the tags are modified in a user plan. Reloads the tags filter, if this filter is currently selected.\n         * @name   reloadTagsIfNeeded\n         * @param {Event} event\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.reloadTagsIfNeeded = function(event) {\n            event.preventDefault();\n            if ($('.competencyreport #tag').is(':checked')) {\n                this.loadTags();\n            }\n        };\n\n        /**\n         * Triggered when a tag is selected.\n         *\n         * @name   tagChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.tagChangeHandler = function(e) {\n            var self = this;\n            self.tagId = $(e.target).val();\n            self.withcomments = $(\"#filter-comments\").is(':checked');\n\n            if (self.tagId == '') {\n                self.tagId = null;\n            }\n            var promise = ajax.call([{\n                methodname: 'report_lpmonitoring_search_plans_with_tag',\n                args: {\n                    tagid: self.tagId,\n                    withcomments: self.withcomments\n                }\n            }]);\n\n            promise[0].then(function(results) {\n                var label = '';\n                // Render the options of the select for learning plans.\n                var oldTagLearningplanId = self.tagLearningplanId;\n                $(self.learningplanTagSelector + ' option').remove();\n\n                if (results.length > 0) {\n                    str.get_string('selectlearningplan', 'report_lpmonitoring').done(\n                        function(selectlearningplan) {\n                            $(self.learningplanTagSelector).append($('<option>').text(selectlearningplan).val(''));\n\n                            $.each(results, function(index, plan) {\n                                label = plan.fullname + ' - ' + plan.planname;\n                                $(self.learningplanTagSelector).append($('<option>').text(label).val(plan.planid));\n                            });\n                            $(self.learningplanTagSelector).prop(\"disabled\", false);\n\n                            // Select the option that was selected before.\n                            var selectorOption = self.learningplanTagSelector + \" option[value=\" + oldTagLearningplanId + \"]\";\n                            var optionExists = ( $(selectorOption).length > 0 );\n                            if (optionExists === true) {\n                                $(self.learningplanTagSelector).val(oldTagLearningplanId);\n                                self.tagLearningplanId = oldTagLearningplanId;\n                            } else {\n                                self.tagLearningplanId = null;\n                            }\n                        }\n                    );\n                } else {\n                    $(self.learningplanTagSelector).prop(\"disabled\", true);\n                    str.get_string('nolearningplanavailable', 'report_lpmonitoring').done(\n                        function(nolearningplanavailable) {\n                            $(self.learningplanTagSelector).append($('<option>').text(nolearningplanavailable).val(''));\n                        }\n                    );\n                }\n                $(self.learningplanTagSelector).trigger('change');\n\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Triggered when a student's plan associated to a tag is selected.\n         *\n         * @name   studentPlansChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.learningplanTagChangeHandler = function(e) {\n            var self = this;\n            self.tagLearningplanId = $(e.target).val();\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Set display rating for plan.\n         *\n         * @name   changeDisplayRating\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeDisplayRating = function(e) {\n            var displayrating = 0;\n            if ($(e.target).is( \":checked\" )) {\n                displayrating = 1;\n            }\n            var planid = $(e.target).data('displayrating-plan');\n\n            var promise = ajax.call([{\n                methodname: 'tool_lp_set_display_rating_for_plan',\n                args: {\n                    planid: planid,\n                    visible: displayrating\n                }\n            }, {\n                methodname: 'tool_lp_can_reset_display_rating_for_plan',\n                args: {\n                    planid: planid\n                }\n            }\n            ]);\n\n            promise[0].then(function() {\n                promise[1].then(function(canresetdisplayrating) {\n                    if (displayrating) {\n                        $('.competencyreport .displayratings input[type=checkbox]').prop(\"checked\", true);\n                    } else {\n                        $('.competencyreport .displayratings input[type=checkbox]').prop(\"checked\", false);\n                    }\n                    if (canresetdisplayrating) {\n                        $('.competencyreport .resetdisplayrating').show();\n                    }\n                }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n                );\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Reset display rating for plan.\n         *\n         * @name   resetDisplayRating\n         * @param  {Number} planid\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.resetDisplayRating = function(planid) {\n            var promise = ajax.call([{\n                methodname: 'tool_lp_reset_display_rating_for_plan',\n                args: {\n                    planid: planid\n                }\n            }, {\n                methodname: 'tool_lp_has_to_display_rating',\n                args: {\n                    planid: planid\n                }\n            }\n            ]);\n\n            promise[0].then(function() {\n                promise[1].then(function(displayrating) {\n                    if (displayrating) {\n                        $('.competencyreport .displayratings input[type=checkbox]').prop(\"checked\", true);\n                    } else {\n                        $('.competencyreport .displayratings input[type=checkbox]').prop(\"checked\", false);\n                    }\n                    $('.competencyreport .resetdisplayrating').hide();\n                }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n                );\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Reset the user using learning plan template selection.\n         *\n         * @name   resetUserUsingLPTemplateSelection\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.resetUserUsingLPTemplateSelection = function() {\n            var self = this,\n            autocomplete = $('.competencyreport .templatefilter .form-autocomplete-selection'),\n            selection = autocomplete.find('span[aria-selected=\"true\"]');\n            self.learningplanId = null;\n            if (selection.length) {\n                selection.remove();\n                $(self.learningplanSelector + ' option').remove();\n                str.get_string('nouserselected', 'report_lpmonitoring').done(\n                    function(nouserselected) {\n                        autocomplete.append($('<span>').text(nouserselected));\n                    }\n                );\n            }\n        };\n\n        /**\n         * Method to enable or disable the user selector linked to the template filter\n         * @name toggleUserSelector\n         * @param {boolean} state true to disable false to enable\n         * @return {void}\n         */\n        LearningplanReport.prototype.disableUserTemplateSelector = function(state = true) {\n            var userAutocomplete = $('.competencyreport .templatefilter .for-autocomplete .fautocomplete .position-relative'),\n            inputSelector = userAutocomplete.find(':text'),\n            arrowSelector = userAutocomplete.find('.form-autocomplete-downarrow');\n\n            if (inputSelector.length > 0) {\n                inputSelector.prop(\"disabled\", state);\n            }\n            if (arrowSelector.length > 0) {\n                arrowSelector.toggleClass('disabled-option', state);\n            }\n        };\n\n        /**\n         * Load scales from template.\n         *\n         * @name   loadScalesFromTemplate\n         * @param  {Number} templateid\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.loadScalesFromTemplate = function(templateid) {\n            var self = this;\n            var promise = ajax.call([{\n                methodname: 'report_lpmonitoring_get_scales_from_template',\n                args: {\n                    templateid: parseInt(templateid)\n                }\n            }]);\n            promise[0].then(function(results) {\n                var context = {};\n                context.scales = results;\n                context.cmcompgradingenabled = self.cmcompgradingEnabled;\n                templates.render('report_lpmonitoring/scale_filter', context).done(function(html, js) {\n                    $('.competencyreport #scale').html(html);\n                    templates.runTemplateJS(js);\n                });\n                if (results.length > 0) {\n                    $('.competencyreport #scalefilterapply').show();\n                    templates.render('report_lpmonitoring/scale_filter_apply', context).done(function(html, js) {\n                        $('.competencyreport #scalefilter').html(html);\n                        templates.runTemplateJS(js);\n                    });\n                    $('.competencyreport #scalesortorderlabel').show();\n                    templates.render('report_lpmonitoring/scale_filter_sortorder', context).done(function(html, js) {\n                        $('.competencyreport #scalesortorder').html(html);\n                        templates.runTemplateJS(js);\n                    });\n                } else {\n                    $('.competencyreport #scalefilterapply').hide();\n                    $('.competencyreport #scalesortorderlabel').hide();\n                    $('.competencyreport #scalefilter').html('');\n                    $('.competencyreport #scalesortorder').html('');\n                }\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Build options for learning plan.\n         *\n         * @name   buildLearningplanOptions\n         * @param  {Array} options\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.buildLearningplanOptions = function(options) {\n            var self = this;\n            // Reset options scales.\n            $(self.scaleSelector + ' option').remove();\n            $(self.scaleSelector).append($('<option>'));\n\n            $.each(options, function(key, value) {\n                $(self.scaleSelector).append($('<option>').text(value.name).val(value.id));\n            });\n        };\n\n        /**\n         * Triggered when a learning plan is selected.\n         *\n         * @name   learningplanChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.learningplanChangeHandler = function(e) {\n            var self = this;\n            self.learningplanId = $(e.target).val();\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Triggered when a student is selected.\n         *\n         * @name   studentChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.studentChangeHandler = function(e) {\n            var self = this;\n            self.userId = $(e.target).val();\n            if (self.userId) {\n                var promise = ajax.call([{\n                    methodname: 'core_competency_list_user_plans',\n                    args: {\n                        userid: self.userId\n                    }\n                }]);\n\n                promise[0].then(function(results) {\n                    // Reset options learning plans.\n                    $(self.studentPlansSelector + ' option').remove();\n                    if (results.length > 0) {\n                        $(self.studentPlansSelector).prop(\"disabled\", false);\n                        $.each(results, function(key, value) {\n                            $(self.studentPlansSelector).append($('<option>').text(value.name).val(value.id));\n                        });\n                    } else {\n                        $(self.studentPlansSelector).prop(\"disabled\", true);\n                        str.get_string('nolearningplanavailable', 'report_lpmonitoring').done(\n                            function(nolearningplanavailable) {\n                                $(self.studentPlansSelector).append($('<option>').text(nolearningplanavailable).val(''));\n                            }\n                        );\n                    }\n                    $(self.studentPlansSelector).trigger('change');\n                }, notification.exception);\n            }\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Triggered when a student plans is selected.\n         *\n         * @name   studentPlansChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.studentPlansChangeHandler = function(e) {\n            var self = this;\n            self.studentLearningplanId = $(e.target).val();\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Check if we can submit the form.\n         *\n         * @name   checkDataFormReady\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.checkDataFormReady = function() {\n            var self = this,\n                conditionByTemplate = false,\n                conditionStudent = false,\n                conditionByTag = false;\n\n            if (self.userView === false) {\n                conditionByTemplate = $('#template').is(':checked') && $(self.templateSelector).val() !== '';\n                conditionStudent = $('#student').is(':checked') && $(self.studentSelector).val() !== null &&\n                        $('option:selected', $(self.studentSelector)).attr('value') !== undefined &&\n                        $(\"option:selected\", $(self.studentPlansSelector)).attr('value') !== null &&\n                        $(\"option:selected\", $(self.studentPlansSelector)).attr('value') !== undefined &&\n                        $(\"option:selected\", $(self.studentPlansSelector)).attr('value') !== '';\n                conditionByTag = $('#tag').is(':checked') && $(self.tagSelector).val() !== '';\n            } else {\n                conditionStudent = $(self.studentPlansSelector).val() !== null &&\n                        $(self.studentPlansSelector).val() !== '';\n            }\n\n            if (conditionByTemplate || conditionStudent || conditionByTag) {\n                $('#submitFilterReportButton').removeAttr('disabled');\n            } else {\n                $('#submitFilterReportButton').attr('disabled', 'disabled');\n            }\n        };\n\n        /**\n         * Load list of competencies of a specified plan.\n         *\n         * @name   loadListCompetencies\n         * @param  {Object} plan\n         * @param  {Object} elementloading element\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.loadListCompetencies = function(plan, elementloading) {\n            var self = this;\n\n            var promiselistCompetencies = ajax.call([{\n                methodname: 'report_lpmonitoring_list_plan_competencies',\n                args: {\n                    id: plan.id\n                }\n            }]);\n            promiselistCompetencies[0].then(function(results) {\n                if (results.length > 0) {\n                    // Get the \"Detail\" tab content.\n                    var competencies = {competencies_list:results, plan:plan, hascompetencies: true};\n                    templates.render('report_lpmonitoring/list_competencies', competencies).done(function(html, js) {\n                        $(\"#listPlanCompetencies\").html(html);\n                        templates.runTemplateJS(js);\n                        self.loadCompetencyDetail(results, plan, elementloading);\n                        $(\"#nav-tabs\").removeClass(\"hidden\");\n                    });\n                } else {\n                    elementloading.removeClass('loading');\n                    templates.render('report_lpmonitoring/list_competencies', {}).done(function(html, js) {\n                        $(\"#listPlanCompetencies\").html(html);\n                        templates.runTemplateJS(js);\n                        $(\"#report-content\").empty();\n                        $(\"#summary-content\").empty();\n                        $(\"#nav-tabs\").addClass(\"hidden\");\n                    });\n                }\n                self.loadSummaryTab(plan);\n                self.loadReportTab(plan);\n            }).fail(\n                function(exp) {\n                    elementloading.removeClass('loading');\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Load competency detail.\n         *\n         * @name  loadCompetencyDetail\n         * @param {Object[]} competencies\n         * @param {Object} plan\n         * @param {Object} element loader\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.loadCompetencyDetail = function(competencies, plan, element) {\n            var requests = [];\n            var self = this;\n\n            $.each(competencies, function(index, record) {\n                // Locally store user competency information.\n                self.competencies[record.competency.id] = {usercompetency:record.usercompetency};\n                requests.push({\n                    methodname: 'report_lpmonitoring_get_competency_detail',\n                    args: {\n                        competencyid: record.competency.id,\n                        userid: plan.user.id,\n                        planid: plan.id\n                    }\n                });\n            });\n\n            var promises = ajax.call(requests);\n            $.each(promises, function(index, promise) {\n                promise.then(function(context) {\n                    // Locally store competency information.\n                    self.competencies[context.competencyid].competencydetail = context;\n                    context.plan = plan;\n                    context.plan.userid = plan.user.id;\n                    context.cmcompgradingenabled = self.cmcompgradingEnabled;\n                    templates.render('report_lpmonitoring/competency_detail', context).done(function(html, js) {\n                        var compid = context.competencyid;\n                        var userid = plan.user.id;\n                        var planid = plan.id;\n                        var scaleid = context.scaleid;\n                        $('#comp-' + compid + ' .x_content').html(html);\n\n                        // Show comptency ratings details tabs.\n                        if (self.compDetailActiveTab === 'incoursemodule') {\n                            $('.detail-comp-tab a[href=\"#tab-incms-content-' + context.competencyid + '\"]').tab('show');\n                        } else {\n                            $('.detail-comp-tab a[href=\"#tab-incourses-content-' + context.competencyid + '\"]').tab('show');\n                        }\n                        if (context.cangrade) {\n                            // Apply inline grader.\n                            self.applyInlineGrader(compid, userid, planid, scaleid);\n                        }\n\n                        // Apply Donut Graph to the competency in courses.\n                        if (context.hasrating !== false) {\n                            self.ApplyDonutGraph(compid, context, false);\n                        }\n\n                        // Apply Donut Graph to the competency in courses modules.\n                        if (context.hasratingincms !== false && self.cmcompgradingEnabled) {\n                            self.ApplyDonutGraph(compid, context, true);\n                        }\n\n                        // If all template are loaded then hide the loader.\n                        if (index === requests.length - 1) {\n                            element.removeClass('loading');\n                            // Show collapse links.\n                            $('.competencyreport .competency-detail a.collapse-link').css('visibility', '');\n                        }\n                        templates.runTemplateJS(js);\n                        self.colorContrast.apply('#comp-' + compid + ' .x_content .tile-stats .badge.cr-scalename');\n                    });\n                });\n            });\n        };\n\n        /**\n         * Load the report tab.\n         *\n         * @param {Object} plan\n         * @function\n         */\n        LearningplanReport.prototype.loadReportTab = function(plan) {\n            var learningplan = this;\n            // Get the \"Report\" tab content.\n            var promiseCompetenciesReport = ajax.call([{\n                methodname: 'report_lpmonitoring_list_plan_competencies_report',\n                args: {\n                    id: plan.id\n                }\n            }]);\n            promiseCompetenciesReport[0].then(function(results) {\n                if (results['competencies_list'].length > 0) {\n                    var competencies = {reportinfos:results, plan:plan, hascompetencies: true};\n\n                    // Keep the filter and search values.\n                    var checkedvalue = $('input[type=radio][name=reportfilter]:checked').val();\n                    if (checkedvalue == 'course') {\n                        competencies.filterchecked_course = true;\n                    } else if (checkedvalue == 'module') {\n                        competencies.filterchecked_module = true;\n                    } else {\n                        competencies.filterchecked_both = true;\n                    }\n\n                    competencies.tablesearchvalue = $('#table-search-competency').val();\n                    competencies.tablesearchvaluecolumn = $('#table-search-columns').val();\n                    competencies.scalefilterreport = $('#scale-filter-report option:selected').val();\n\n                    // Render the \"Report\" data table template.\n                    templates.render('report_lpmonitoring/datatable', competencies).done(function(html, js) {\n                        $(\"#report-content\").html(html);\n                        templates.runTemplateJS(js);\n                        var popup = new Popup('[data-region=report-competencies-section]', '[data-user-competency=true]');\n                        // Override the after show refresh method of the user competency popup.\n                        popup._refresh = function() {\n                            var self = this;\n                            learningplan.reloadCompetencyDetail(self._competencyId, self._userId, self._planId);\n                            self.close();\n                        };\n                    });\n                } else {\n                    var competencies = {hascompetencies: false};\n                    templates.render('report_lpmonitoring/datatable', competencies).done(function(html, js) {\n                        $(\"#report-content\").html(html);\n                        templates.runTemplateJS(js);\n                    });\n                }\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Load the summary tab.\n         *\n         * @param {Object} plan\n         * @function\n         */\n        LearningplanReport.prototype.loadSummaryTab = function(plan) {\n            var learningplan = this;\n\n            // Get the \"Summary\" tab content.\n            var promiseCompetenciesSummary = ajax.call([{\n                methodname: 'report_lpmonitoring_list_plan_competencies_summary',\n                args: {\n                    id: plan.id\n                }\n            }]);\n            promiseCompetenciesSummary[0].then(function(results) {\n                if (results['scale_competency'].length > 0) {\n                    var competencies = {reportinfos:results, plan:plan, hascompetencies: true};\n\n                    // Keep the filter and search values.\n                    var checkedvalue = $('input[type=radio][name=summaryfilter]:checked').val();\n                    if (checkedvalue == 'course') {\n                        competencies.filterchecked_course = true;\n                    } else if (checkedvalue == 'module') {\n                        competencies.filterchecked_module = true;\n                    } else {\n                        competencies.filterchecked_both = true;\n                    }\n\n                    var scaleselected = $('#scale-filter-summary').val();\n                    for (var i = 0; i < competencies.reportinfos.scale_competency.length; i++) {\n                        var scaleid = competencies.reportinfos.scale_competency[i].scaleid;\n                        competencies.reportinfos.scale_competency[i].scaleselected = false;\n                        if (scaleid == scaleselected) {\n                            competencies.reportinfos.scale_competency[i].scaleselected = true;\n                        }\n                        var searchvalue = $( '#summary-search-competency-' + scaleid ).val();\n                        competencies.reportinfos.scale_competency[i].tablesearchvalue = searchvalue;\n                    }\n\n                    // Render the \"Summary\" data table template.\n                    templates.render('report_lpmonitoring/summary', competencies).done(function(html, js) {\n                        $(\"#summary-content\").html(html);\n                        templates.runTemplateJS(js);\n                        var popup = new Popup('[data-region=summary-competencies-section]', '[data-user-competency=true]');\n                        // Override the after show refresh method of the user competency popup.\n                        popup._refresh = function() {\n                            var self = this;\n                            learningplan.reloadCompetencyDetail(self._competencyId, self._userId, self._planId);\n                            self.close();\n                        };\n                    });\n                } else {\n                    var competencies = {hascompetencies: false};\n                    templates.render('report_lpmonitoring/summary', competencies).done(function(html, js) {\n                        $(\"#summary-content\").html(html);\n                        templates.runTemplateJS(js);\n                    });\n                }\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Apply inline grader for the rate button.\n         *\n         * @name  applyInlineGrader\n         * @param {Number} competencyid comp ID\n         * @param {Number} userid user ID\n         * @param {Number} planid plan ID\n         * @param {Number} scaleid scale ID\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.applyInlineGrader = function(competencyid, userid, planid, scaleid) {\n            var self = this;\n            str.get_string('chooserating', 'tool_lp').done(\n                function(chooserateoption) {\n                    // Set the inline grader.\n                    var grader = new InlineGrader('#rate_' + competencyid,\n                        scaleid,\n                        competencyid,\n                        userid,\n                        planid,\n                        '',\n                        chooserateoption\n                    );\n                    // Callback when finishing rating.\n                    grader.on('competencyupdated', function() {\n                        self.reloadCompetencyDetail(competencyid, userid, planid);\n                    });\n                }\n            );\n        };\n\n        /**\n         * Reload competency detail and proficiency.\n         *\n         * @name  reloadCompetencyDetail\n         * @param {Number} competencyid Competency ID\n         * @param {Number} userid User ID\n         * @param {Number} planid Plan ID\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.reloadCompetencyDetail = function(competencyid, userid, planid) {\n            var self = this;\n            self.competencies[competencyid] = {};\n            var promise = ajax.call([{\n                methodname: 'core_competency_read_plan',\n                args: { id: planid }\n            }, {\n                methodname: 'report_lpmonitoring_get_competency_detail',\n                args: {\n                    competencyid: competencyid,\n                    userid: userid,\n                    planid: planid\n                }\n            }, {\n                methodname: 'report_lpmonitoring_read_plan',\n                args: {\n                    scalevalues: \"\",\n                    templateid: null,\n                    planid: planid,\n                    scalefilterin: self.scalefilterin,\n                    tagid: null,\n                    withcomments: false,\n                    withplans: false\n                }\n            }\n            ]);\n\n            promise[0].then(function(plan) {\n                promise[1].then(function(results) {\n                    // Locally store competency information.\n                    self.competencies[results.competencyid].competencydetail = results;\n                    results.plan = plan;\n                    results.cmcompgradingenabled = self.cmcompgradingEnabled;\n                    templates.render('report_lpmonitoring/competency_detail', results).done(function(html, js) {\n                        $('#comp-' + results.competencyid + ' .x_content').html(html);\n                        templates.runTemplateJS(js);\n                        // Show comptency ratings details tabs.\n                        if (self.compDetailActiveTab === 'incoursemodule') {\n                            $('.detail-comp-tab a[href=\"#tab-incms-content-' + results.competencyid + '\"]').tab('show');\n                        } else {\n                            $('.detail-comp-tab a[href=\"#tab-incourses-content-' + results.competencyid + '\"]').tab('show');\n                        }\n                        if (results.cangrade) {\n                            // Apply inline grader.\n                            self.applyInlineGrader(results.competencyid, userid, planid, results.scaleid);\n                        }\n\n                        // Apply Donut Graph to the competency in courses.\n                        if (results.hasrating !== false) {\n                            self.ApplyDonutGraph(results.competencyid, results, false);\n                        }\n\n                        // Apply Donut Graph to the competency in courses modules.\n                        if (results.hasratingincm !== false && self.cmcompgradingEnabled) {\n                            self.ApplyDonutGraph(results.competencyid, results, true);\n                        }\n                        self.colorContrast.apply('#comp-' + results.competencyid + ' .x_content .tile-stats .badge.cr-scalename');\n                    });\n                    templates.render('report_lpmonitoring/competency_proficiency', results).done(function(html, js) {\n                        $('#comp-' + results.competencyid + ' span.level').html(html);\n                        templates.runTemplateJS(js);\n                    });\n                    // Reload plan stats.\n                    promise[2].then(function(results) {\n                        templates.render('report_lpmonitoring/plan_stats_report',\n                        {\n                            plan:results.plan,\n                            hascompetencies:true\n                        }).done(function(html, js) {\n                            $('#plan-stats-report').html(html);\n                            templates.runTemplateJS(js);\n                        });\n                    });\n                });\n            });\n\n        };\n\n        /**\n         * Apply Donut Grapth to the competency.\n         *\n         * @name   ApplyDonutGraph\n         * @param  {Number} competencyid\n         * @param  {Array} data\n         * @param  {Boolean} forcm\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.ApplyDonutGraph = function(competencyid, data, forcm) {\n            var options = {\n                legend: false,\n                responsive: false,\n                tooltips: {enabled: false}\n            };\n            var colors = [];\n            var canvasselector = '#canvas-graph-' + competencyid;\n            if (forcm) {\n                canvasselector = '#cm-canvas-graph-' + competencyid;\n            }\n\n            var itemsbyscales = [];\n            $.each(data.scalecompetencyitems, function(index, record) {\n                colors.push(record.color);\n                if (forcm) {\n                    itemsbyscales.push(record.nbcm);\n                } else {\n                    itemsbyscales.push(record.nbcourse);\n                }\n            });\n\n            new Chart($(canvasselector), {\n                type: 'doughnut',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        data: itemsbyscales,\n                        backgroundColor: colors,\n                        hoverBackgroundColor: []\n                    }]\n                },\n                options: options\n            });\n        };\n\n        /**\n         * Submit filter form.\n         *\n         * @name   submitFormHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.submitFormHandler = function() {\n            var self = this;\n            var templateSelected = $(\"#template\").is(':checked');\n            var tagSelected = $(\"#tag\").is(':checked');\n            var templateid = null;\n            var planid = null;\n            var tagid = null;\n            if (templateSelected === true) {\n                templateid = self.templateId;\n                planid = self.learningplanId;\n                self.withcomments = $(\"#filter-comment\").is(':checked');\n                self.withplans = $(\"#filter-plan\").is(':checked');\n            } else if (tagSelected === true) {\n                tagid = self.tagId;\n                planid = self.tagLearningplanId;\n            } else {\n                // Else = \"#student\" is selected.\n                planid = self.studentLearningplanId;\n            }\n            self.scalesvaluesSelected = $(self.learningplanSelector).data('scalefilter');\n            if (self.scalefilterin === 'coursemodule') {\n                self.compDetailActiveTab = 'incoursemodule';\n            } else {\n                self.compDetailActiveTab = 'incourse';\n            }\n\n            self.displayPlan(planid, templateid, tagid);\n        };\n\n        /**\n         * Handler on scale change.\n         *\n         * @name   changeScaleHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeScaleHandler = function() {\n            var self = this;\n            var scalefiltervalues = [];\n            $('.competencyreport .scalefiltervalues').each(function() {\n                if ($(this).is(\":checked\")) {\n                    scalefiltervalues.push({scalevalue : $(this).data(\"scalevalue\"), scaleid : $(this).data(\"scaleid\")});\n                }\n            });\n\n            if (scalefiltervalues.length > 0) {\n                $('.competencyreport input[name=optionscalefilter]').prop(\"disabled\", false);\n                $('.competencyreport input[name=optionscalesortorder]').prop(\"disabled\", false);\n\n                if ($(\"#scalefiltercourse\").is(\":not(:checked)\") && $(\"#scalefilterplan\").is(\":not(:checked)\")) {\n                    if (self.cmcompgradingEnabled) {\n                        $('#scalefiltercoursemodule').prop(\"checked\", true);\n                    } else {\n                        $('#scalefiltercourse').prop(\"checked\", true);\n                    }\n                }\n                if ($(\"#scalesortorderasc\").is(\":not(:checked)\") && $(\"#scalesortorderdesc\").is(\":not(:checked)\")) {\n                    $('#scalesortorderasc').prop(\"checked\", true);\n                }\n            } else {\n                $('.competencyreport input[name=optionscalefilter]').prop(\"checked\", false);\n                $('.competencyreport input[name=optionscalefilter]').prop(\"disabled\", true);\n\n                $('.competencyreport input[name=optionscalesortorder]').prop(\"disabled\", true);\n                $('.competencyreport input[name=optionscalesortorder]').prop(\"checked\", false);\n            }\n            self.changeScaleApplyHandler();\n            self.changeScaleSortorderHandler();\n            self.resetUserUsingLPTemplateSelection();\n            var filterscaleinputs = JSON.stringify(scalefiltervalues);\n            $(self.learningplanSelector).data('scalefilter', filterscaleinputs);\n        };\n\n        /**\n         * Handler on scale filter application change.\n         *\n         * @name   changeScaleApplyHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeScaleApplyHandler = function() {\n            var self = this;\n\n            self.scalefilterin = '';\n            if ($(\"#scalefilterplan\").is(':checked')) {\n                self.scalefilterin = '';\n            }\n            if ($(\"#scalefiltercourse\").is(':checked')) {\n                self.scalefilterin = 'course';\n            }\n            if ($(\"#scalefiltercoursemodule\").is(':checked')) {\n                self.scalefilterin = 'coursemodule';\n            }\n            $(self.learningplanSelector).data('scalefilterapply', self.scalefilterin);\n        };\n\n        /**\n         * Handler on scale sort order change.\n         *\n         * @name   changeScaleSortorderHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeScaleSortorderHandler = function() {\n            var self = this;\n            self.scalesortorder = 'ASC';\n            if ($(\"#scalesortorderdesc\").is(':checked')) {\n                self.scalesortorder = 'DESC';\n            }\n            $(self.learningplanSelector).data('scalesortorder', self.scalesortorder);\n        };\n\n        /**\n         * Handler on \"only plans with comments\" filter change.\n         *\n         * @name   changeWithcommentsHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeWithcommentsHandler = function() {\n            var self = this;\n            self.withcomments = $(\"#filter-comment\").is(':checked');\n            $(self.learningplanSelector).data('withcomments', self.withcomments);\n        };\n\n        /**\n         * Handler on \"only students with minimum two plans\" filter change.\n         *\n         * @name   changeWithplansHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeWithplansHandler = function() {\n            var self = this;\n            self.withplans = $(\"#filter-plan\").is(':checked');\n            $(self.learningplanSelector).data('withplans', self.withplans);\n        };\n\n        /**\n         * Display the list of evidences in competency.\n         *\n         * @name   displayEvidencelist\n         * @param {Object} evidences Evidence list\n         * @param {Object} trigger element\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayEvidencelist = function(evidences, trigger) {\n            var self = this;\n            if (evidences.listevidence.length > 0) {\n                str.get_string('listofevidence', 'tool_lp').done(function(title) {\n                    return ModalFactory.create({\n                        type: ModalFactory.types.DEFAULT,\n                        title: title,\n                        body: templates.render('report_lpmonitoring/list_evidences_in_competency', evidences),\n                        large: true\n                    }).done(function(modal) {\n                        modal.getRoot().on(ModalEvents.hidden, function() {\n                            modal.destroy();\n                            self.focusContentItem(trigger);\n                        }.bind(this));\n                        modal.getRoot().on(ModalEvents.bodyRendered, function() {\n                            DataTable.apply('#listevidencecompetency-' + evidences.competencyid, true, true);\n                        }.bind(this));\n                        modal.show();\n                    }.bind(this));\n                }).fail(notification.exception);\n            }\n        };\n\n        /**\n         * Display the list of courses in competency.\n         *\n         * @name   displayCourselist\n         * @param {Object[]} listcourses\n         * @param {Object} trigger element\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayCourselist = function(listcourses, trigger) {\n            var self = this;\n            if (listcourses.listtotalcourses.length > 0) {\n                str.get_string('linkedcourses', 'tool_lp').done(function(title) {\n                    return ModalFactory.create({\n                        type: ModalFactory.types.DEFAULT,\n                        title: title,\n                        body: templates.render('report_lpmonitoring/list_courses_in_competency', listcourses),\n                        large: true\n                    }).done(function(modal) {\n                        modal.getRoot().on(ModalEvents.hidden, function() {\n                            modal.destroy();\n                            self.focusContentItem(trigger);\n                        }.bind(this));\n                        modal.getRoot().on(ModalEvents.bodyRendered, function() {\n                            DataTable.apply('#listcoursecompetency-' + listcourses.competencyid, true, true);\n                        }.bind(this));\n                        modal.show();\n                    }.bind(this));\n                }).fail(notification.exception);\n            }\n        };\n\n        /**\n         * Display the list of courses modules in competency.\n         *\n         * @name   displayCmlist\n         * @param {Object[]} listcms\n         * @param {Object} trigger element\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayCmlist = function(listcms, trigger) {\n            var self = this;\n            if (listcms.listtotalcms.length > 0) {\n                str.get_string('linkedcms', 'report_lpmonitoring').done(function(title) {\n                    return ModalFactory.create({\n                        type: ModalFactory.types.DEFAULT,\n                        title: title,\n                        body: templates.render('report_lpmonitoring/list_cms_in_competency', listcms),\n                        large: true\n                    }).done(function(modal) {\n                        modal.getRoot().on(ModalEvents.hidden, function() {\n                            modal.destroy();\n                            self.focusContentItem(trigger);\n                        }.bind(this));\n                        modal.getRoot().on(ModalEvents.bodyRendered, function() {\n                            DataTable.apply('#listcmcompetency-' + listcms.competencyid, true, true);\n                        }.bind(this));\n                        modal.show();\n                    }.bind(this));\n                }).fail(notification.exception);\n            }\n        };\n\n        /**\n         * Display plan.\n         *\n         * @name   displayPlan\n         * @param {Number} planid The learning plan ID\n         * @param {Number} templateid The learning plan template ID\n         * @param {Number} tagid The tag ID\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayPlan = function(planid, templateid, tagid) {\n            var elementloading = null,\n                    self = this;\n            if ($('#plan-user-info').length) {\n                elementloading = $('#plan-user-info');\n            } else {\n                elementloading = $(\"#reportFilter button\");\n            }\n            elementloading.addClass('loading');\n            // Hide collapse links as long as the competencies details are not displayed.\n            $('.competencyreport .competency-detail a.collapse-link').css('visibility', 'hidden');\n\n            // Set scales values empty if not defined.\n            self.scalesvaluesSelected = self.userView === false ? self.scalesvaluesSelected : \"\";\n\n            var promise = ajax.call([{\n                methodname: 'report_lpmonitoring_read_plan',\n                args: {\n                    planid: parseInt(planid),\n                    templateid: parseInt(templateid),\n                    scalevalues: self.scalesvaluesSelected,\n                    scalefilterin: self.scalefilterin,\n                    scalesortorder: self.scalesortorder,\n                    tagid: parseInt(tagid),\n                    withcomments: self.withcomments,\n                    withplans: self.withplans\n                }\n            }]);\n            promise[0].then(function(results) {\n                results.templateid = parseInt(templateid);\n                M.cfg.contextid = results.plan.usercontext;\n                if (results.hasnavigation === false) {\n                    $('.plan-info-container').addClass('nonavigation');\n                } else {\n                    $('.plan-info-container').removeClass('nonavigation');\n                }\n                // State of navigation.\n                results.navigationclosed = false;\n                if ($('.plan-info-container').hasClass('closed')) {\n                    results.navigationclosed = true;\n                }\n                if (self.userView === false) {\n                    return templates.render('report_lpmonitoring/user_info', results).done(function(html) {\n                        $(\"#userInfoContainer\").html(html);\n                        self.loadListCompetencies(results.plan, elementloading);\n                        return templates.render('report_lpmonitoring/users_list_navigation', results).done(function(html) {\n                            $(\"#users-list-full-navigation\").html(html);\n                        });\n                    });\n                } else {\n                    str.get_string('learningplancompetencies', 'report_lpmonitoring', results.plan.name).done(function(planname) {\n                        $('#planInfoContainer h3').text(planname);\n                        self.loadListCompetencies(results.plan, elementloading);\n                    });\n                }\n            }).fail(\n                    function(exp) {\n                        elementloading.removeClass('loading');\n                        if (exp.errorcode === 'emptytemplate') {\n                            var exception = {exception:exp};\n                            return templates.render('report_lpmonitoring/user_info', exception).done(function(html) {\n                                $(\"#userInfoContainer\").html(html);\n                                $(\"#listPlanCompetencies\").empty();\n                                $(\"#plan-stats-report\").empty();\n                                $(\"#report-content\").empty();\n                                $(\"#summary-content\").empty();\n                                $(\"#nav-tabs\").hide();\n                                $(\"#users-list-full-navigation\").empty();\n                            });\n                        } else {\n                            notification.exception(exp);\n                        }\n                    }\n                );\n        };\n\n        /**\n         * Display the list of courses in competency.\n         *\n         * @name   displayScaleCourseList\n         * @param {Object[]} listcourses list of courses\n         * @param {Object} trigger element\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayScaleCourseList = function(listcourses, trigger) {\n            var self = this;\n            if (listcourses.scalecompetencyitem.listcourses.length > 0) {\n                str.get_string('linkedcourses', 'tool_lp').done(function(title) {\n                    return ModalFactory.create({\n                        type: ModalFactory.types.DEFAULT,\n                        title: title,\n                        body: templates.render('report_lpmonitoring/list_courses_in_scale_value', listcourses),\n                        large: true\n                    }).done(function(modal) {\n                        modal.getRoot().on(ModalEvents.hidden, function() {\n                            modal.destroy();\n                            self.focusContentItem(trigger);\n                        }.bind(this));\n                        modal.getRoot().on(ModalEvents.bodyRendered, function() {\n                            DataTable.apply('#listscalecoursecompetency-' + listcourses.competencyid, true, true);\n                            self.colorContrast.apply('.moodle-dialogue-base .badge.cr-scalename');\n                        }.bind(this));\n                        modal.show();\n                    }.bind(this));\n                }).fail(notification.exception);\n            }\n        };\n\n        /**\n         * Display the list of courses modules in competency.\n         *\n         * @name   displayScaleCmList\n         * @param {Object[]} listitems\n         * @param {Object} trigger element\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayScaleCmList = function(listitems, trigger) {\n            var self = this;\n            if (listitems.scalecompetencyitem.listcms.length > 0) {\n                str.get_string('linkedcms', 'report_lpmonitoring').done(function(title) {\n                    return ModalFactory.create({\n                        type: ModalFactory.types.DEFAULT,\n                        title: title,\n                        body: templates.render('report_lpmonitoring/list_cms_in_scale_value', listitems),\n                        large: true\n                    }).done(function(modal) {\n                        modal.getRoot().on(ModalEvents.hidden, function() {\n                            modal.destroy();\n                            self.focusContentItem(trigger);\n                        }.bind(this));\n                        modal.getRoot().on(ModalEvents.bodyRendered, function() {\n                            DataTable.apply('#listscalecmcompetency-' + listitems.competencyid, true, true);\n                            self.colorContrast.apply('.moodle-dialogue-base .badge.cr-scalename');\n                        }.bind(this));\n                        modal.show();\n                    }.bind(this));\n                }).fail(notification.exception);\n            }\n        };\n\n        /**\n         * Focus the given content item or the first focusable element within\n         * the content item.\n         *\n         * @method focusContentItem\n         * @param {object} item The content item jQuery element\n         */\n        LearningplanReport.prototype.focusContentItem = function(item) {\n            var focusable = 'input:not([type=\"hidden\"]), a[href], button, textarea, select, [tabindex]';\n            if (item.is(focusable)) {\n                item.focus();\n            } else {\n                item.find(focusable).first().focus();\n            }\n        };\n\n        /**\n         * Reset grade for one competency.\n         *\n         * @name   resetGrade\n         * @param  {Number} planid\n         * @param  {Number} userid\n         * @param  {Number} competencyid or null for all competencies of this plan\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.resetGrade = function(planid, userid, competencyid) {\n            var self = this;\n            var allcompetencies = false;\n            if (competencyid === null) {\n                allcompetencies = true;\n            }\n            var dialogue = new ResetGradeDialogue(allcompetencies);\n            dialogue.on('rated', function(e, data) {\n                var promise = ajax.call([{\n                    methodname: 'report_lpmonitoring_reset_grading',\n                    args: {\n                        planid: planid,\n                        competencyid: competencyid,\n                        note: data.note\n                    }\n                }]);\n\n                promise[0].then(function() {\n                    if (competencyid === null) {\n                        self.displayPlan(planid, self.templateId, self.tagId);\n                    } else {\n                        self.reloadCompetencyDetail(competencyid, userid, planid);\n                    }\n                }).fail(\n                    function(exp) {\n                        notification.exception(exp);\n                    }\n                );\n            });\n            dialogue.display();\n        };\n\n        /**\n         * Init the differents page blocks and inputs form.\n         *\n         * @name   initPage\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.initPage = function() {\n            var self = this;\n            str.get_strings([\n                { key: 'selectuser', component: 'report_lpmonitoring' },\n                { key: 'nouserselected', component: 'report_lpmonitoring' }]\n            ).done(\n                function(strings) {\n                    // Autocomplete users in templates.\n                    autocomplete.enhance(\n                        self.learningplanSelector,\n                        false,\n                        'report_lpmonitoring/learningplan',\n                        strings[0],\n                        false,\n                        true,\n                        strings[1])\n                        .then(()=> self.disableUserTemplateSelector());\n                    // Autocomplete users.\n                    autocomplete.enhance(\n                        self.studentSelector,\n                        false,\n                        'tool_lp/form-user-selector',\n                        strings[0],\n                        false,\n                        true,\n                        strings[1]);\n                    if (self.userView === false) {\n                        if ($('.competencyreport #student').is(':checked')) {\n                            $('.competencyreport .templatefilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .tagfilter').toggleClass('disabled-option', true);\n                        } else if ($('.competencyreport #tag').is(':checked')) {\n                            $('.competencyreport .studentfilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .templatefilter').toggleClass('disabled-option', true);\n                        } else {\n                            $('.competencyreport .studentfilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .tagfilter').toggleClass('disabled-option', true);\n                        }\n                    }\n                    self.checkDataFormReady();\n                }\n            ).fail(notification.exception);\n            $(\".competencyreport\").on('click', '.moreless-toggler', function(event) {\n                event.preventDefault();\n                $(\".advanced\").toggle();\n                $(this).toggleClass(\"hidden\").siblings().removeClass('hidden');\n            });\n\n            // Allow collapse of block panels.\n            fieldsettoggler.init();\n\n            // Collapse block panels.\n            $(\".competencyreport\").on('click', '.collapse-link', function(event) {\n                event.preventDefault();\n                var e = $(this).closest(\".x_panel\"),\n                t = $(this).find(\"i\"),\n                n = e.find(\".x_content\");\n                t.toggleClass(\"fa-chevron-right fa-chevron-down\");\n                n.slideToggle();\n                e.toggleClass(\"panel-collapsed\");\n            });\n\n            // Handle click on scale number courses.\n            $(\".competencyreport\").on('click', 'a.scaleinfo', function(event) {\n                event.preventDefault();\n                var trigger = $(event.target).closest('td');\n                var competencyid = $(this).data(\"competencyid\");\n                var scalevalue = $(this).data(\"scalevalue\");\n                var type = $(this).data(\"type\");\n\n                if (typeof self.competencies[competencyid] !== 'undefined') {\n                    var listitems = {};\n                    var competencydetail = self.competencies[competencyid].competencydetail;\n                    listitems.scalecompetencyitem = competencydetail.scalecompetencyitems[scalevalue - 1];\n                    listitems.competencyid = competencyid;\n                    if (type === 'incm') {\n                        self.displayScaleCmList(listitems, trigger);\n                    } else {\n                        self.displayScaleCourseList(listitems, trigger);\n                    }\n                }\n            });\n\n            $('.competencyreport #student').on('change', function(){\n                if ($(this).is(':checked')){\n                    $('.competencyreport .studentfilter').toggleClass('disabled-option', false);\n                    $('.competencyreport .templatefilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .tagfilter').toggleClass('disabled-option', true);\n                }\n                self.checkDataFormReady();\n            });\n\n            $('.competencyreport #template').on('change', function(){\n                if ($(this).is(':checked')){\n                    $('.competencyreport .studentfilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .templatefilter').toggleClass('disabled-option', false);\n                    $('.competencyreport .tagfilter').toggleClass('disabled-option', true);\n                }\n                self.checkDataFormReady();\n            });\n\n            $('.competencyreport #tag').on('change', function(){\n                if ($(this).is(':checked')){\n                    self.loadTags();\n                    $('.competencyreport .studentfilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .templatefilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .tagfilter').toggleClass('disabled-option', false);\n                }\n                self.checkDataFormReady();\n            });\n\n            // Filter form submit.\n            $(document).on('submit', '#reportFilter', function(){\n                self.submitFormHandler();\n                return false;\n            });\n\n            // User plan navigation.\n            $(\".competencyreport\").on('click', 'a.navigatetoplan', function(event) {\n                event.preventDefault();\n                var planid = $(this).data('planid');\n                var templateid = $(this).data('templateid');\n                var tagid = $(this).data('tagid');\n                self.displayPlan(planid, templateid, tagid);\n            });\n\n            // User plan full navigation.\n            $(\".competencyreport\").on('click', '.toggle-lp-list-users', function(event) {\n                event.preventDefault();\n                $(this).find('i.angle').toggleClass('fa-angle-double-right fa-angle-double-left');\n                $(this).closest('.plan-info-container').toggleClass('closed');\n                $('div[data-region=\"blocks-lp-list-users\"]').toggleClass('lp-list-users-closed');\n            });\n            var tmpselector = '.plan-info-container .table-list-users .nav-list-users-displayinfo';\n            $(\".competencyreport\").on('click', tmpselector, function(event) {\n                event.stopPropagation();\n                event.preventDefault();\n                $(this).find('i.fa').toggleClass('fa-angle-down fa-angle-up');\n                $(this).parent().find('span.item-nav-list-users-info').toggleClass('hidden');\n            });\n            $(\".competencyreport\").on('click', '.plan-info-container .table-list-users tr', function(event) {\n                event.preventDefault();\n                var planid = $(this).data('planid');\n                var templateid = $(this).data('templateid');\n                var tagid = $(this).data('tagid');\n                self.displayPlan(planid, templateid, tagid);\n            });\n\n            // Handle click on list evidence.\n            $(\".competencyreport\").on('click', 'a.listevidence', function(event) {\n                event.preventDefault();\n                var trigger = $(event.target);\n                var competencyid = $(this).data('competencyid');\n                if (typeof self.competencies[competencyid] !== 'undefined') {\n                    var listevidence = {};\n                    listevidence.listevidence = self.competencies[competencyid].competencydetail.listevidence;\n                    listevidence.competencyid = competencyid;\n                    self.displayEvidencelist(listevidence, trigger);\n                }\n            });\n\n            // Handle click on total number courses.\n            $(\".competencyreport\").on('click', 'a.totalnbcourses', function(event) {\n                event.preventDefault();\n                var trigger = $(event.target);\n                var competencyid = $(this).data('competencyid');\n                if (typeof self.competencies[competencyid] !== 'undefined') {\n                    var totallistcourses = {};\n                    totallistcourses.listtotalcourses = self.competencies[competencyid].competencydetail.listtotalcourses;\n                    totallistcourses.competencyid = competencyid;\n                    self.displayCourselist(totallistcourses, trigger);\n                }\n            });\n\n            // Handle click on total number of courses modules.\n            $(\".competencyreport\").on('click', 'a.totalnbcms', function(event) {\n                event.preventDefault();\n                var trigger = $(event.target);\n                var competencyid = $(this).data('competencyid');\n                if (typeof self.competencies[competencyid] !== 'undefined') {\n                    var totallistcms = {};\n                    totallistcms.listtotalcms = self.competencies[competencyid].competencydetail.listtotalcms;\n                    totallistcms.competencyid = competencyid;\n\n                    self.displayCmlist(totallistcms, trigger);\n                }\n            });\n            // Handle click on rating tabs.\n            $(\".competencyreport\").on('click', '.detail-comp-tab a', function(event) {\n                event.preventDefault();\n                if ($(event.target).hasClass('incm')) {\n                    self.compDetailActiveTab = \"incoursemodule\";\n                } else {\n                    self.compDetailActiveTab = \"incourse\";\n                }\n            });\n\n            // Handle click on reset display rating.\n            $(\".competencyreport\").on('click', '.resetdisplayrating a', function(event) {\n                event.preventDefault();\n                var planid = $(this).data('canresetdisplayrating-plan');\n                self.resetDisplayRating(planid);\n            });\n\n            // Handle click on reset one competency.\n            $(\".competencyreport\").on('click', '.reset-grade a', function(event) {\n                event.preventDefault();\n                var planid = $(this).data('resetgrade-plan');\n                var competencyid = $(this).data('competencyid');\n                var userid = $(this).data('userid');\n                self.resetGrade(planid, userid, competencyid);\n            });\n\n            // Handle click on reset all competencies.\n            $(\".competencyreport\").on('click', '.reset-grade-all a', function(event) {\n                event.preventDefault();\n                var planid = $(this).data('resetgrade-plan');\n                var userid = $(this).data('userid');\n                self.resetGrade(planid, userid, null);\n            });\n\n            // Collapse/Expand all.\n            str.get_strings([\n                { key: 'collapseall'},\n                { key: 'expandall'}]\n            ).done(\n                function(strings) {\n                    var collapseall = strings[0];\n                    var expandall = strings[1];\n                    $(\".competencyreport\").on('click', '.collapsible-actions a', function(event) {\n                        event.preventDefault();\n                        if ($(this).hasClass('collapse-all')) {\n                            $(this).text(expandall);\n                            $('#listPlanCompetencies div.x_panel:not(.panel-collapsed) a.collapse-link').trigger('click');\n                        } else {\n                            $(this).text(collapseall);\n                            $('#listPlanCompetencies div.panel-collapsed a.collapse-link').trigger('click');\n                        }\n                        $(this).toggleClass(\"collapse-all expand-all\");\n                    });\n                }\n            ).fail(notification.exception);\n        };\n\n        return {\n            /**\n             * Main initialisation.\n             *\n             * @param {Boolean} userview True if the report is for user view (student).\n             * @param {Boolean} cmcompgradingenabled True if grading in course module competency is enabled.\n             * @return {LearningplanReport} A new instance of LearningplanReport.\n             * @method init\n             */\n            init: function(userview, cmcompgradingenabled) {\n                return new LearningplanReport(userview, cmcompgradingenabled);\n            },\n            /**\n             * Process result autocomplete.\n             *\n             * @param {type} selector\n             * @param {type} results\n             * @returns {Array}\n             */\n            processResults: function(selector, results) {\n                var users = [];\n                $.each(results, function(index, userplan) {\n                    users.push({\n                        value: userplan.planid,\n                        label: userplan._label\n                    });\n                });\n                return users;\n            },\n\n            /**\n             * Transport method for autocomplete.\n             *\n             * @param {type} selector\n             * @param {type} query\n             * @param {type} success\n             * @param {type} failure\n             * @returns {undefined}\n             */\n            transport: function(selector, query, success, failure) {\n                var promise;\n                var scalefilterapply = $(selector).data('scalefilterapply');\n                var scalesortorder = $(selector).data('scalesortorder');\n                scalesortorder = scalesortorder ? scalesortorder : 'ASC';\n                var withcomments = $(selector).data('withcomments');\n                withcomments = withcomments ? withcomments : false;\n                var withplans = $(selector).data('withplans');\n                withplans = withplans ? withplans : false;\n                var templateid = $(selector).data('templateid');\n                if (templateid === '') {\n                    return [];\n                }\n\n                promise = ajax.call([{\n                    methodname: 'report_lpmonitoring_search_users_by_templateid',\n                    args: {\n                        query: query,\n                        templateid: parseInt(templateid),\n                        scalevalues: $(selector).data('scalefilter'),\n                        scalefilterin: scalefilterapply,\n                        scalesortorder: scalesortorder,\n                        withcomments: withcomments,\n                        withplans: withplans\n                    }\n                }]);\n\n                promise[0].then(function(results) {\n                    var promises = [],\n                        i = 0;\n                    // Render the label.\n                    $.each(results, function(index, user) {\n                        var ctx = user,\n                            identity = [];\n                        $.each(['idnumber', 'email', 'phone1', 'phone2', 'department', 'institution'], function(i, k) {\n                            if (typeof user[k] !== 'undefined' && user[k] !== '') {\n                                ctx.hasidentity = true;\n                                identity.push(user[k]);\n                            }\n                        });\n                        ctx.identity = identity.join(', ');\n                        promises.push(templates.render('report_lpmonitoring/form-user-selector-suggestion', ctx));\n                    });\n\n                    // Apply the label to the results.\n                    return $.when.apply($.when, promises).then(function() {\n                        var args = arguments;\n                        $.each(results, function(index, user) {\n                            user._label = args[i];\n                            i++;\n                        });\n                        success(results);\n                    });\n\n                }, failure);\n            }\n        };\n\n    });"],"names":["define","$","templates","ajax","notification","str","Chart","autocomplete","ModalFactory","ModalEvents","Popup","InlineGrader","fieldsettoggler","colorcontrast","DataTable","ResetGradeDialogue","LearningplanReport","userview","cmcompgradingenabled","userView","cmcompgradingEnabled","initPage","colorContrast","init","learningplan","this","_refresh","reloadCompetencyDetail","_competencyId","_userId","_planId","close","templateSelector","on","templateChangeHandler","bind","change","learningplanSelector","learningplanChangeHandler","studentSelector","studentChangeHandler","studentPlansSelector","studentPlansChangeHandler","tagSelector","tagChangeHandler","learningplanTagSelector","learningplanTagChangeHandler","learningplanTagCommentsSelector","changeScaleApplyHandler","changeScaleSortorderHandler","changeScaleHandler","prop","changeDisplayRating","changeWithcommentsHandler","changeWithplansHandler","reloadTagsIfNeeded","prototype","templateId","learningplanId","studentLearningplanId","tagLearningplanId","tagId","userId","templateSelected","studentSelected","competencies","scalesvaluesSelected","scalefilterin","scalesortorder","withcomments","withplans","tagsAreLoading","compDetailActiveTab","e","target","val","data","resetUserUsingLPTemplateSelection","removeClass","hasClass","show","loadScalesFromTemplate","disableUserTemplateSelector","addClass","hide","empty","checkDataFormReady","loadTags","self","remove","call","methodname","args","then","results","get_string","done","selecttag","append","text","each","index","tag","id","length","fail","exp","exception","event","preventDefault","is","tagid","label","oldTagLearningplanId","selectlearningplan","plan","fullname","planname","planid","selectorOption","nolearningplanavailable","trigger","displayrating","promise","visible","canresetdisplayrating","resetDisplayRating","selection","find","nouserselected","state","userAutocomplete","inputSelector","arrowSelector","toggleClass","templateid","parseInt","context","scales","render","html","js","runTemplateJS","buildLearningplanOptions","options","scaleSelector","key","value","name","userid","conditionByTemplate","conditionStudent","conditionByTag","undefined","attr","removeAttr","loadListCompetencies","elementloading","competencies_list","hascompetencies","loadCompetencyDetail","loadSummaryTab","loadReportTab","element","requests","record","competency","usercompetency","push","competencyid","user","promises","competencydetail","compid","scaleid","tab","cangrade","applyInlineGrader","hasrating","ApplyDonutGraph","hasratingincms","css","apply","reportinfos","checkedvalue","filterchecked_course","filterchecked_module","filterchecked_both","tablesearchvalue","tablesearchvaluecolumn","scalefilterreport","scaleselected","i","scale_competency","searchvalue","chooserateoption","scalevalues","hasratingincm","forcm","colors","canvasselector","itemsbyscales","scalecompetencyitems","color","nbcm","nbcourse","type","labels","datasets","backgroundColor","hoverBackgroundColor","legend","responsive","tooltips","enabled","submitFormHandler","tagSelected","displayPlan","scalefiltervalues","scalevalue","filterscaleinputs","JSON","stringify","displayEvidencelist","evidences","listevidence","title","create","types","DEFAULT","body","large","modal","getRoot","hidden","destroy","focusContentItem","bodyRendered","displayCourselist","listcourses","listtotalcourses","displayCmlist","listcms","listtotalcms","M","cfg","contextid","usercontext","hasnavigation","navigationclosed","errorcode","displayScaleCourseList","scalecompetencyitem","displayScaleCmList","listitems","item","focusable","focus","first","resetGrade","allcompetencies","dialogue","note","display","get_strings","component","strings","enhance","toggle","siblings","closest","t","n","slideToggle","document","stopPropagation","parent","totallistcourses","totallistcms","collapseall","expandall","processResults","selector","users","userplan","_label","transport","query","success","failure","scalefilterapply","ctx","identity","k","hasidentity","join","when","arguments"],"mappings":"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"}