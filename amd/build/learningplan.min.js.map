{"version":3,"file":"learningplan.min.js","sources":["../src/learningplan.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Learning plan report navigation.\n *\n * @package    report_learningplan\n * @author     Issam Taboubi <issam.taboubi@umontreal.ca>\n * @copyright  2016 Université de Montréal\n */\n\ndefine(['jquery',\n    'core/templates',\n    'core/ajax',\n    'core/notification',\n    'core/str',\n    'core/chartjs',\n    'core/form-autocomplete',\n    'tool_lp/dialogue',\n    'report_lpmonitoring/user_competency_popup',\n    'tool_lp/grade_user_competency_inline',\n    'report_lpmonitoring/fieldsettoggler',\n    'report_lpmonitoring/colorcontrast',\n    'report_lpmonitoring/paginated_datatable',\n    'report_lpmonitoring/resetgrade_dialogue'],\n    function($, templates, ajax, notification, str, Chart, autocomplete, Dialogue, Popup, InlineGrader, fieldsettoggler,\n            colorcontrast, DataTable, ResetGradeDialogue) {\n\n        /**\n         * Learning plan report.\n         * @param {Boolean} userview True if the report is for user view (student).\n         * @param {Boolean} cmcompgradingenabled True if grading in course module competency is enabled.\n         */\n        var LearningplanReport = function(userview, cmcompgradingenabled) {\n            this.userView = userview || false;\n            this.cmcompgradingEnabled = cmcompgradingenabled || false;\n\n            // Init the form filter.\n            this.initPage();\n\n            // Init the color contrast object.\n            this.colorContrast = colorcontrast.init();\n\n            // Init User competency page popup.\n            var learningplan = this;\n            var popup = new Popup('[data-region=list-competencies-section]', '[data-user-competency=true]');\n            // Override the after show refresh method of the user competency popup.\n            popup._refresh = function() {\n                var self = this;\n                learningplan.reloadCompetencyDetail(self._competencyId, self._userId, self._planId);\n                self.close();\n            };\n\n            $(this.templateSelector).on('change', this.templateChangeHandler.bind(this)).change();\n            $(this.learningplanSelector).on('change', this.learningplanChangeHandler.bind(this)).change();\n            $(this.studentSelector).on('change', this.studentChangeHandler.bind(this)).change();\n\n            $(this.cohortSelector).on('change',this.cohortChangeHandler.bind(this)).change();\n            $(this.cohortTemplateSelector).on('change',this.cohortTemplateHandler.bind(this)).change();\n\n            $(this.studentPlansSelector).on('change', this.studentPlansChangeHandler.bind(this)).change();\n            $(this.tagSelector).on('change', this.tagChangeHandler.bind(this)).change();\n            $(this.learningplanTagSelector).on('change', this.learningplanTagChangeHandler.bind(this)).change();\n            $(this.learningplanTagCommentsSelector).on('change', this.learningplanTagChangeHandler.bind(this)).change();\n\n            $('.competencyreport').on('change',\n                '.scalefiltercontainer input[name=\"optionscalefilter\"]',\n                this.changeScaleApplyHandler.bind(this)).change();\n            $('.competencyreport').on('change',\n                '.scalesortordercontainer input[name=\"optionscalesortorder\"]',\n                this.changeScaleSortorderHandler.bind(this)).change();\n            $('.competencyreport').on('change','.scalefiltervalues' ,this.changeScaleHandler.bind(this)).change();\n            $('.competencyreport input[name=optionfilter]').prop(\"disabled\", false);\n            $('.competencyreport input[name=optionscalesortorder]').prop(\"disabled\", false);\n            // Display rating in user plan.\n            $(\".competencyreport\").on(\"change\", \".displayratings input[type=checkbox]\",\n                this.changeDisplayRating.bind(this)).change();\n            // Only plans with comments filter.\n            $('.competencyreport').on('change','#filter-comment' ,this.changeWithcommentsHandler.bind(this)).change();\n            // Only students with at least two plans.\n            $('.competencyreport').on('change','#filter-plan' ,this.changeWithplansHandler.bind(this)).change();\n            // When the tags are modified we reload the tags filter.\n            $(\".competencyreport\").on('DOMSubtreeModified', \".tags-stats\", this.reloadTagsIfNeeded.bind(this));\n            // When the comments is checked we modify the tags filter.\n            // Only plans with comments filter and tags.\n            $('.competencyreport').on('change','#filter-comments',this.reloadTagsIfNeeded.bind(this));\n\n        };\n\n        /** @var {Number} The template ID. */\n        LearningplanReport.prototype.templateId = null;\n        /** @var {Boolean} If report is for user view */\n        LearningplanReport.prototype.userView = false;\n        /** @var {Number} The learning plan ID from template. */\n        LearningplanReport.prototype.learningplanId = null;\n        /** @var {Number} The learning plan ID from student. */\n        LearningplanReport.prototype.studentLearningplanId = null;\n        /** @var {Number} The learning plan ID from cohort. */\n        LearningplanReport.prototype.cohortLearningplanId = null;\n        /** @var {Number} The learning plan ID from tag. */\n        LearningplanReport.prototype.tagLearningplanId = null;\n        /** @var {String} The selected tag ID. */\n        LearningplanReport.prototype.tagId = null;\n        /** @var {String} The selected cohort ID. */\n        LearningplanReport.prototype.cohortId = null;\n        /** @var {Number} The user ID. */\n        LearningplanReport.prototype.userId = null;\n        /** @var {Boolean} If template option is selected. */\n        LearningplanReport.prototype.templateSelected = null;\n        /** @var {Boolean} If student option is selected. */\n        LearningplanReport.prototype.studentSelected = null;\n        /** @var {Array} Competencies informations. */\n        LearningplanReport.prototype.competencies = {};\n        /** @var {String} Scales values filter. */\n        LearningplanReport.prototype.scalesvaluesSelected = null;\n        /** @var {ColorContrast} ColorContrast object instance. */\n        LearningplanReport.prototype.colorcontrast = null;\n        /** @var {String} Apply scale filters on grade in plan, course or course module. */\n        LearningplanReport.prototype.scalefilterin = '';\n        /** @var {String} Apply scale sortorder. */\n        LearningplanReport.prototype.scalesortorder = 'ASC';\n        /** @var {String} Apply filter for only plans with comments. */\n        LearningplanReport.prototype.withcomments = false;\n        /** @var {String} Apply filter for only students with at least two plans. */\n        LearningplanReport.prototype.withplans = false;\n        /** @var {Boolean} Is course module competency grading enabled. */\n        LearningplanReport.prototype.cmcompgradingEnabled = false;\n\n        /** @var {String} The template select box selector. */\n        LearningplanReport.prototype.templateSelector = \"#templateSelectorReport\";\n        /** @var {String} The learning plan select box selector. */\n        LearningplanReport.prototype.learningplanSelector = '#learningplanSelectorReport';\n        /** @var {String} The student selector. */\n        LearningplanReport.prototype.studentSelector = '#studentSelectorReport';\n\n        /** @var {String} The cohort selector. */\n        LearningplanReport.prototype.cohortSelector = '#cohortSelectorReport';\n        /** @var {String} The cohort plan selector. */\n        LearningplanReport.prototype.cohortTemplateSelector = '#cohortTemplateSelectorReport';\n\n        /** @var {String} The student plans selector. */\n        LearningplanReport.prototype.studentPlansSelector = '#studentPlansSelectorReport';\n        /** @var {String} The tag select box selector. */\n        LearningplanReport.prototype.tagSelector = \"#tagSelectorReport\";\n        /** @var {String} The learning plan with this tag select box selector. */\n        LearningplanReport.prototype.learningplanTagSelector = '#learningplanTagSelectorReport';\n        /** @var {String} */\n        LearningplanReport.prototype.learningplanTagCommentsSelector = '#filter-comments';\n\n        /** @var {Boolean} Indicate that the tags are currently loading, to prevent loading them twice at the same time. */\n        LearningplanReport.prototype.tagsAreLoading = false;\n\n        /** @var {String} Active tab course or course module. */\n        LearningplanReport.prototype.compDetailActiveTab = null;\n\n        /**\n         * Triggered when a template is selected.\n         *\n         * @name   templateChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.templateChangeHandler = function(e) {\n            var self = this;\n            self.templateId = $(e.target).val();\n            $(self.learningplanSelector).data('templateid', self.templateId);\n            $(self.learningplanSelector).data('scalefilter', '');\n            $(self.learningplanSelector).data('scalesortorder', '');\n            self.resetUserUsingLPTemplateSelection();\n            self.learningplanId = null;\n            if (self.templateId !== '') {\n                $('.competencyreport .moreless-actions').removeClass('hidden');\n                if ($('.competencyreport .show-toggler').hasClass('hidden')) {\n                    $('.competencyreport .advanced').show();\n                }\n                self.loadScalesFromTemplate(self.templateId);\n            } else {\n                $('.competencyreport .moreless-actions').addClass('hidden');\n                $('.competencyreport .advanced').hide();\n                $('.competencyreport #scale').empty();\n            }\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Load the tags list from the webservice.\n         *\n         * @name   loadTags\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.loadTags = function() {\n            var self = this;\n            if(self.tagsAreLoading === false) {\n                self.tagsAreLoading = true;\n                $(self.tagSelector + ' option').remove();\n\n                var promise = ajax.call([{\n                    methodname: 'report_lpmonitoring_search_tags_for_accessible_plans',\n                    args: {\n\n                    }\n                }]);\n\n                promise[0].then(function(results) {\n                    str.get_string('selecttag', 'report_lpmonitoring').done(\n                        function(selecttag) {\n                            $(self.tagSelector).append($('<option>').text(selecttag).val(''));\n\n                            $.each(results, function(index, tag) {\n                                $(self.tagSelector).append($('<option>').text(tag.tag).val(tag.id));\n                            });\n\n                            // Select the option that was selected before.\n                            var optionExists = ( $(self.tagSelector + \" option[value=\" + self.tagId + \"]\").length > 0 );\n                            if(optionExists === true) {\n                                $(self.tagSelector).val(self.tagId);\n                            } else {\n                                self.tagId = null;\n                                self.tagLearningplanId = null;\n                            }\n\n                            // Simulate a change to reload the learning plans associated to the tag.\n                            $(self.tagSelector).change();\n                            self.tagsAreLoading = false;\n                        }\n                    );\n                }).fail(\n                    function(exp) {\n                        notification.exception(exp);\n                        self.tagsAreLoading = false;\n                    }\n                );\n            }\n        };\n\n        /**\n         * Triggered when the tags are modified in a user plan. Reloads the tags filter, if this filter is currently selected.\n         * @name   reloadTagsIfNeeded\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.reloadTagsIfNeeded = function(event) {\n            event.preventDefault();\n            if ($('.competencyreport #tag').is(':checked')) {\n                this.loadTags();\n            }\n        };\n\n        /**\n         * Triggered when a tag is selected.\n         *\n         * @name   tagChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.tagChangeHandler = function(e) {\n            var self = this;\n            self.tagId = $(e.target).val();\n            self.withcomments = $(\"#filter-comments\").is(':checked');\n\n            if (self.tagId == '') {\n                self.tagId = null;\n            }\n            var promise = ajax.call([{\n                methodname: 'report_lpmonitoring_search_plans_with_tag',\n                args: {\n                    tagid: self.tagId,\n                    withcomments: self.withcomments\n                }\n            }]);\n\n            promise[0].then(function(results) {\n                var label = '';\n                // Render the options of the select for learning plans.\n                var oldTagLearningplanId = self.tagLearningplanId;\n                $(self.learningplanTagSelector + ' option').remove();\n\n                if (results.length > 0) {\n                    str.get_string('selectlearningplan', 'report_lpmonitoring').done(\n                        function(selectlearningplan) {\n                            $(self.learningplanTagSelector).append($('<option>').text(selectlearningplan).val(''));\n\n                            $.each(results, function(index, plan) {\n                                label = plan.fullname + ' - ' + plan.planname;\n                                $(self.learningplanTagSelector).append($('<option>').text(label).val(plan.planid));\n                            });\n                            $(self.learningplanTagSelector).prop(\"disabled\", false);\n\n                            // Select the option that was selected before.\n                            var selectorOption = self.learningplanTagSelector + \" option[value=\" + oldTagLearningplanId + \"]\";\n                            var optionExists = ( $(selectorOption).length > 0 );\n                            if(optionExists === true) {\n                                $(self.learningplanTagSelector).val(oldTagLearningplanId);\n                                self.tagLearningplanId = oldTagLearningplanId;\n                            } else {\n                                self.tagLearningplanId = null;\n                            }\n                        }\n                    );\n                } else {\n                    $(self.learningplanTagSelector).prop(\"disabled\", true);\n                    str.get_string('nolearningplanavailable', 'report_lpmonitoring').done(\n                        function(nolearningplanavailable) {\n                            $(self.learningplanTagSelector).append($('<option>').text(nolearningplanavailable).val(''));\n                        }\n                    );\n                }\n                $(self.learningplanTagSelector).trigger('change');\n\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Triggered when a student's plan associated to a tag is selected.\n         *\n         * @name   studentPlansChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.learningplanTagChangeHandler = function(e) {\n            var self = this;\n            self.tagLearningplanId = $(e.target).val();\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Set display rating for plan.\n         *\n         * @name   changeDisplayRating\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeDisplayRating = function(e) {\n            var displayrating = 0;\n            if ($(e.target).is( \":checked\" )) {\n                displayrating = 1;\n            }\n            var planid = $(e.target).data('displayrating-plan');\n\n            var promise = ajax.call([{\n                methodname: 'tool_lp_set_display_rating_for_plan',\n                args: {\n                    planid: planid,\n                    visible: displayrating\n                }\n            }, {\n                methodname: 'tool_lp_can_reset_display_rating_for_plan',\n                args: {\n                    planid: planid\n                }\n            }\n            ]);\n\n            promise[0].then(function() {\n                promise[1].then(function(canresetdisplayrating) {\n                    if (displayrating) {\n                        $('.competencyreport .displayratings input[type=checkbox]').prop(\"checked\", true);\n                    } else {\n                        $('.competencyreport .displayratings input[type=checkbox]').prop(\"checked\", false);\n                    }\n                    if (canresetdisplayrating) {\n                        $('.competencyreport .resetdisplayrating').show();\n                    }\n                }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n                );\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Reset display rating for plan.\n         *\n         * @name   resetDisplayRating\n         * @param  {Number} planid\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.resetDisplayRating = function(planid) {\n            var promise = ajax.call([{\n                methodname: 'tool_lp_reset_display_rating_for_plan',\n                args: {\n                    planid: planid\n                }\n            }, {\n                methodname: 'tool_lp_has_to_display_rating',\n                args: {\n                    planid: planid\n                }\n            }\n            ]);\n\n            promise[0].then(function() {\n                promise[1].then(function(displayrating) {\n                    if (displayrating) {\n                        $('.competencyreport .displayratings input[type=checkbox]').prop(\"checked\", true);\n                    } else {\n                        $('.competencyreport .displayratings input[type=checkbox]').prop(\"checked\", false);\n                    }\n                    $('.competencyreport .resetdisplayrating').hide();\n                }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n                );\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Reset the user using learning plan template selection.\n         *\n         * @name   resetUserUsingLPTemplateSelection\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.resetUserUsingLPTemplateSelection = function() {\n            var self = this,\n            autocomplete = $('.competencyreport .templatefilter .form-autocomplete-selection'),\n            selection = autocomplete.find('span[aria-selected=\"true\"]');\n            self.learningplanId = null;\n            if (selection.length) {\n                selection.remove();\n                $(self.learningplanSelector + ' option').remove();\n                str.get_string('nouserselected', 'report_lpmonitoring').done(\n                    function(nouserselected) {\n                        autocomplete.append($('<span>').text(nouserselected));\n                    }\n                );\n            }\n        };\n\n        /**\n         * Load scales from template.\n         *\n         * @name   loadScalesFromTemplate\n         * @param  {Number} templateid\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.loadScalesFromTemplate = function(templateid) {\n            var self = this;\n            var promise = ajax.call([{\n                methodname: 'report_lpmonitoring_get_scales_from_template',\n                args: {\n                    templateid: parseInt(templateid)\n                }\n            }]);\n            promise[0].then(function(results) {\n                var context = {};\n                context.scales = results;\n                context.cmcompgradingenabled = self.cmcompgradingEnabled;\n                templates.render('report_lpmonitoring/scale_filter', context).done(function(html, js) {\n                    $('.competencyreport #scale').html(html);\n                    templates.runTemplateJS(js);\n                });\n                if (results.length > 0) {\n                    $('.competencyreport #scalefilterapply').show();\n                    templates.render('report_lpmonitoring/scale_filter_apply', context).done(function(html, js) {\n                        $('.competencyreport #scalefilter').html(html);\n                        templates.runTemplateJS(js);\n                    });\n                    $('.competencyreport #scalesortorderlabel').show();\n                    templates.render('report_lpmonitoring/scale_filter_sortorder', context).done(function(html, js) {\n                        $('.competencyreport #scalesortorder').html(html);\n                        templates.runTemplateJS(js);\n                    });\n                } else {\n                    $('.competencyreport #scalefilterapply').hide();\n                    $('.competencyreport #scalesortorderlabel').hide();\n                    $('.competencyreport #scalefilter').html('');\n                    $('.competencyreport #scalesortorder').html('');\n                }\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Build options for learning plan.\n         *\n         * @name   buildLearningplanOptions\n         * @param  {Array} options\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.buildLearningplanOptions = function(options) {\n            var self = this;\n            // Reset options scales.\n            $(self.scaleSelector + ' option').remove();\n            $(self.scaleSelector).append($('<option>'));\n\n            $.each(options, function(key, value) {\n                $(self.scaleSelector).append($('<option>').text(value.name).val(value.id));\n            });\n        };\n\n        /**\n         * Triggered when a learning plan is selected.\n         *\n         * @name   learningplanChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.learningplanChangeHandler = function(e) {\n            var self = this;\n            self.learningplanId = $(e.target).val();\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Triggered when a student is selected.\n         *\n         * @name   studentChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.studentChangeHandler = function(e) {\n            var self = this;\n            self.userId = $(e.target).val();\n            if (self.userId !== null) {\n                var promise = ajax.call([{\n                    methodname: 'core_competency_list_user_plans',\n                    args: {\n                        userid: self.userId\n                    }\n                }]);\n\n                promise[0].then(function(results) {\n                    // Reset options learning plans.\n                    $(self.studentPlansSelector + ' option').remove();\n                    if (results.length > 0) {\n                        $(self.studentPlansSelector).prop(\"disabled\", false);\n                        $.each(results, function(key, value) {\n                            $(self.studentPlansSelector).append($('<option>').text(value.name).val(value.id));\n                        });\n                    } else {\n                        $(self.studentPlansSelector).prop(\"disabled\", true);\n                        str.get_string('nolearningplanavailable', 'report_lpmonitoring').done(\n                            function(nolearningplanavailable) {\n                                $(self.studentPlansSelector).append($('<option>').text(nolearningplanavailable).val(''));\n                            }\n                        );\n                    }\n                    $(self.studentPlansSelector).trigger('change');\n                }, notification.exception);\n            }\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Triggered when a cohort is selected.\n         *\n         * @name   cohortChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.cohortChangeHandler = function(e) {\n            var self = this;\n            self.cohortId = $(e.target).val();\n            if (self.cohortId !== null && self.cohortId !== '') {\n                var promise = ajax.call([{\n                    methodname: 'report_lpmonitoring_list_cohort_templates',\n                    args: {\n                        cohortid: self.cohortId\n                    }\n                }]);\n\n                promise[0].then(function(results) {\n                    // Reset options learning plans.\n                    $(self.cohortTemplateSelector + ' option').remove();\n                    if (results.length > 0) {\n                        $(self.cohortTemplateSelector).prop(\"disabled\", false);\n                        str.get_string('selecttemplate', 'report_lpmonitoring').done(\n                            function(selecttemplate) {\n                                $(self.cohortTemplateSelector).append($('<option>').text(selecttemplate).val('0'));\n                                $.each(results, function(key, value) {\n                                    $(self.cohortTemplateSelector).append($('<option>').text(value.name).val(value.id));\n                                });\n                            }\n                        );\n                    } else {\n                        $(self.cohortTemplateselector).prop(\"disabled\", true);\n                        str.get_string('nocohorttemplateavailable', 'report_lpmonitoring').done(\n                            function(nocohorttemplateavailable) {\n                                $(self.cohortTemplateSelector).append($('<option>').text(nocohorttemplateavailable).val('0'));\n                            }\n                        );\n                    }\n                }, notification.exception);\n            }\n            self.checkDataFormReady();\n        }\n\n        /**\n         * Triggered when a cohort template is selected.\n         *\n         * @name   cohortTemplateHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.cohortTemplateHandler = function(e) {\n            var self = this;\n            self.templateId = $(e.target).val();\n            self.checkDataFormReady();\n        }\n\n        /**\n         * Triggered when a student plans is selected.\n         *\n         * @name   studentPlansChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.studentPlansChangeHandler = function(e) {\n            var self = this;\n            self.studentLearningplanId = $(e.target).val();\n            self.checkDataFormReady();\n        };\n\n        /**\n         * Check if we can submit the form.\n         *\n         * @name   checkDataFormReady\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.checkDataFormReady = function() {\n            var self = this,\n                conditionByTemplate = false,\n                conditionStudent = false,\n                conditionByTag = false,\n                conditionCohort = false;\n\n            if (self.userView === false) {\n                conditionByTemplate = $('#template').is(':checked') && $(self.templateSelector).val() !== '';\n                conditionStudent = $('#student').is(':checked') && $(self.studentSelector).val() !== null &&\n                        $(self.studentPlansSelector).val() !== null &&\n                        $(self.studentPlansSelector).val() !== '';\n                conditionByTag = $('#tag').is(':checked') && $(self.tagSelector).val() !== '';\n                conditionCohort = $('#cohort').is(':checked') &&\n                        $(self.cohortSelector).val() !== null && $(self.cohortSelector).val() != '0' &&\n                        $(self.cohortTemplateSelector).val() !== null && $(self.cohortTemplateSelector).val() != '0';\n            } else {\n                conditionStudent = $(self.studentPlansSelector).val() !== null &&\n                        $(self.studentPlansSelector).val() !== '';\n                conditionCohort = $('#cohort').is(':checked') &&\n                        $(self.cohortSelector).val() !== null && $(self.cohortSelector).val() != '0' &&\n                        $(self.cohortTemplateSelector).val() !== null && $(self.cohortTemplateSelector).val() != '0';\n            }\n\n            if (conditionByTemplate || conditionStudent || conditionByTag || conditionCohort) {\n                $('#submitFilterReportButton').removeAttr('disabled');\n            } else {\n                $('#submitFilterReportButton').attr('disabled', 'disabled');\n            }\n        };\n\n        /**\n         * Load list of competencies of a specified plan.\n         *\n         * @name   loadListCompetencies\n         * @param  {Object} Plan\n         * @param  {Object} Loader element\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.loadListCompetencies = function(plan, elementloading) {\n            var self = this;\n\n            var promiselistCompetencies = ajax.call([{\n                methodname: 'report_lpmonitoring_list_plan_competencies',\n                args: {\n                    id: plan.id\n                }\n            }]);\n            promiselistCompetencies[0].then(function(results) {\n                if (results.length > 0) {\n                    // Get the \"Detail\" tab content.\n                    var competencies = {competencies_list:results, plan:plan, hascompetencies: true};\n                    templates.render('report_lpmonitoring/list_competencies', competencies).done(function(html, js) {\n                        $(\"#listPlanCompetencies\").html(html);\n                        templates.runTemplateJS(js);\n                        self.loadCompetencyDetail(results, plan, elementloading);\n                        $(\"#nav-tabs\").removeClass(\"hidden\");\n                    });\n                } else {\n                    elementloading.removeClass('loading');\n                    templates.render('report_lpmonitoring/list_competencies', {}).done(function(html, js) {\n                        $(\"#listPlanCompetencies\").html(html);\n                        templates.runTemplateJS(js);\n                        $(\"#report-content\").empty();\n                        $(\"#summary-content\").empty();\n                        $(\"#nav-tabs\").addClass(\"hidden\");\n                    });\n                }\n                self.loadSummaryTab(plan);\n                self.loadReportTab(plan);\n            }).fail(\n                function(exp) {\n                    elementloading.removeClass('loading');\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Load competency detail.\n         *\n         * @name  loadCompetencyDetail\n         * @param {Object[]} competencies\n         * @param {Object} Plan\n         * @param {Object} loader element\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.loadCompetencyDetail = function(competencies, plan, element) {\n            var requests = [];\n            var self = this;\n\n            $.each(competencies, function(index, record) {\n                // Locally store user competency information.\n                self.competencies[record.competency.id] = {usercompetency:record.usercompetency};\n                requests.push({\n                    methodname: 'report_lpmonitoring_get_competency_detail',\n                    args: {\n                        competencyid: record.competency.id,\n                        userid: plan.user.id,\n                        planid: plan.id\n                    }\n                });\n            });\n\n            var promises = ajax.call(requests);\n            $.each(promises, function(index, promise) {\n                promise.then(function(context) {\n                    // Locally store competency information.\n                    self.competencies[context.competencyid].competencydetail = context;\n                    context.plan = plan;\n                    context.plan.userid = plan.user.id;\n                    context.cmcompgradingenabled = self.cmcompgradingEnabled;\n                    templates.render('report_lpmonitoring/competency_detail', context).done(function(html, js) {\n                        var compid = context.competencyid;\n                        var userid = plan.user.id;\n                        var planid = plan.id;\n                        var scaleid = context.scaleid;\n                        $('#comp-' + compid + ' .x_content').html(html);\n\n                        // Show comptency ratings details tabs.\n                        if (self.compDetailActiveTab === 'incoursemodule') {\n                            $('.detail-comp-tab a[href=\"#tab-incms-content-' + context.competencyid + '\"]').tab('show');\n                        } else {\n                            $('.detail-comp-tab a[href=\"#tab-incourses-content-' + context.competencyid + '\"]').tab('show');\n                        }\n                        if (context.cangrade) {\n                            // Apply inline grader.\n                            self.applyInlineGrader(compid, userid, planid, scaleid);\n                        }\n\n                        // Apply Donut Graph to the competency in courses.\n                        if (context.hasrating !== false) {\n                            self.ApplyDonutGraph(compid, context, false);\n                        }\n\n                        // Apply Donut Graph to the competency in courses modules.\n                        if (context.hasratingincms !== false && self.cmcompgradingEnabled) {\n                            self.ApplyDonutGraph(compid, context, true);\n                        }\n\n                        // If all template are loaded then hide the loader.\n                        if (index === requests.length - 1) {\n                            element.removeClass('loading');\n                            // Show collapse links.\n                            $('.competencyreport .competency-detail a.collapse-link').css('visibility', '');\n                        }\n                        templates.runTemplateJS(js);\n                        self.colorContrast.apply('#comp-' + compid + ' .x_content .tile-stats .label.cr-scalename');\n                    });\n                });\n            });\n        };\n\n        /**\n         * Load the report tab.\n         *\n         * @param {Object} Plan\n         * @function\n         */\n        LearningplanReport.prototype.loadReportTab = function(plan) {\n            var learningplan = this;\n            // Get the \"Report\" tab content.\n            var promiseCompetenciesReport = ajax.call([{\n                methodname: 'report_lpmonitoring_list_plan_competencies_report',\n                args: {\n                    id: plan.id\n                }\n            }]);\n            promiseCompetenciesReport[0].then(function(results) {\n                if (results['competencies_list'].length > 0) {\n                    var competencies = {reportinfos:results, plan:plan, hascompetencies: true};\n\n                    // Keep the filter and search values.\n                    var checkedvalue = $('input[type=radio][name=reportfilter]:checked').val();\n                    if (checkedvalue == 'course') {\n                        competencies.filterchecked_course = true;\n                    } else if (checkedvalue == 'module') {\n                        competencies.filterchecked_module = true;\n                    } else {\n                        competencies.filterchecked_both = true;\n                    }\n\n                    competencies.tablesearchvalue = $('#table-search-competency').val();\n                    competencies.tablesearchvaluecolumn = $('#table-search-columns').val();\n                    competencies.scalefilterreport = $('#scale-filter-report option:selected').val();\n\n                    // Render the \"Report\" data table template.\n                    templates.render('report_lpmonitoring/datatable', competencies).done(function(html, js) {\n                        $(\"#report-content\").html(html);\n                        templates.runTemplateJS(js);\n                        var popup = new Popup('[data-region=report-competencies-section]', '[data-user-competency=true]');\n                        // Override the after show refresh method of the user competency popup.\n                        popup._refresh = function() {\n                            var self = this;\n                            learningplan.reloadCompetencyDetail(self._competencyId, self._userId, self._planId);\n                            self.close();\n                        };\n                    });\n                } else {\n                    var competencies = {hascompetencies: false};\n                    templates.render('report_lpmonitoring/datatable', competencies).done(function(html, js) {\n                        $(\"#report-content\").html(html);\n                        templates.runTemplateJS(js);\n                    });\n                }\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Load the summary tab.\n         *\n         * @param {Object} Plan\n         * @function\n         */\n        LearningplanReport.prototype.loadSummaryTab = function(plan) {\n            var learningplan = this;\n\n            // Get the \"Summary\" tab content.\n            var promiseCompetenciesSummary = ajax.call([{\n                methodname: 'report_lpmonitoring_list_plan_competencies_summary',\n                args: {\n                    id: plan.id\n                }\n            }]);\n            promiseCompetenciesSummary[0].then(function(results) {\n                if (results['scale_competency'].length > 0) {\n                    var competencies = {reportinfos:results, plan:plan, hascompetencies: true};\n\n                    // Keep the filter and search values.\n                    var checkedvalue = $('input[type=radio][name=summaryfilter]:checked').val();\n                    if (checkedvalue == 'course') {\n                        competencies.filterchecked_course = true;\n                    } else if (checkedvalue == 'module') {\n                        competencies.filterchecked_module = true;\n                    } else {\n                        competencies.filterchecked_both = true;\n                    }\n\n                    var scaleselected = $('#scale-filter-summary').val();\n                    for (var i = 0; i < competencies.reportinfos.scale_competency.length; i++) {\n                        var scaleid = competencies.reportinfos.scale_competency[i].scaleid;\n                        competencies.reportinfos.scale_competency[i].scaleselected = false;\n                        if (scaleid == scaleselected) {\n                            competencies.reportinfos.scale_competency[i].scaleselected = true;\n                        }\n                        var searchvalue = $( '#summary-search-competency-' + scaleid ).val();\n                        competencies.reportinfos.scale_competency[i].tablesearchvalue = searchvalue;\n                    }\n\n                    // Render the \"Summary\" data table template.\n                    templates.render('report_lpmonitoring/summary', competencies).done(function(html, js) {\n                        $(\"#summary-content\").html(html);\n                        templates.runTemplateJS(js);\n                        var popup = new Popup('[data-region=summary-competencies-section]', '[data-user-competency=true]');\n                        // Override the after show refresh method of the user competency popup.\n                        popup._refresh = function() {\n                            var self = this;\n                            learningplan.reloadCompetencyDetail(self._competencyId, self._userId, self._planId);\n                            self.close();\n                        };\n                    });\n                } else {\n                    var competencies = {hascompetencies: false};\n                    templates.render('report_lpmonitoring/summary', competencies).done(function(html, js) {\n                        $(\"#summary-content\").html(html);\n                        templates.runTemplateJS(js);\n                    });\n                }\n            }).fail(\n                function(exp) {\n                    notification.exception(exp);\n                }\n            );\n        };\n\n        /**\n         * Apply inline grader for the rate button.\n         *\n         * @name  applyInlineGrader\n         * @param {Number} Competency ID\n         * @param {Number} User ID\n         * @param {Number} Plan ID\n         * @param {Number} Scale ID\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.applyInlineGrader = function(competencyid, userid, planid, scaleid) {\n            var self = this;\n            str.get_string('chooserating', 'tool_lp').done(\n                function(chooserateoption) {\n                    // Set the inline grader.\n                    var grader = new InlineGrader('#rate_' + competencyid,\n                        scaleid,\n                        competencyid,\n                        userid,\n                        planid,\n                        '',\n                        chooserateoption\n                    );\n                    // Callback when finishing rating.\n                    grader.on('competencyupdated', function() {\n                        self.reloadCompetencyDetail(competencyid, userid, planid);\n                    });\n                }\n            );\n        };\n\n        /**\n         * Reload competency detail and proficiency.\n         *\n         * @name  reloadCompetencyDetail\n         * @param {Number} Competency ID\n         * @param {Number} User ID\n         * @param {Number} Plan ID\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.reloadCompetencyDetail = function(competencyid, userid, planid) {\n            var self = this;\n            self.competencies[competencyid] = {};\n            var promise = ajax.call([{\n                methodname: 'core_competency_read_plan',\n                args: { id: planid }\n            }, {\n                methodname: 'report_lpmonitoring_get_competency_detail',\n                args: {\n                    competencyid: competencyid,\n                    userid: userid,\n                    planid: planid\n                }\n            },{\n                methodname: 'report_lpmonitoring_read_plan',\n                args: {\n                    scalevalues: \"\",\n                    templateid: null,\n                    planid: planid,\n                    scalefilterin: self.scalefilterin,\n                    tagid: null,\n                    cohortid: null,\n                    withcomments: false,\n                    withplans: false\n                }\n            }\n            ]);\n\n            promise[0].then(function(plan) {\n                promise[1].then(function(results) {\n                    // Locally store competency information.\n                    self.competencies[results.competencyid].competencydetail = results;\n                    results.plan = plan;\n                    results.cmcompgradingenabled = self.cmcompgradingEnabled;\n                    templates.render('report_lpmonitoring/competency_detail', results).done(function(html, js) {\n                        $('#comp-' + results.competencyid + ' .x_content').html(html);\n                        templates.runTemplateJS(js);\n                        // Show comptency ratings details tabs.\n                        if (self.compDetailActiveTab === 'incoursemodule') {\n                            $('.detail-comp-tab a[href=\"#tab-incms-content-' + results.competencyid + '\"]').tab('show');\n                        } else {\n                            $('.detail-comp-tab a[href=\"#tab-incourses-content-' + results.competencyid + '\"]').tab('show');\n                        }\n                        if (results.cangrade) {\n                            // Apply inline grader.\n                            self.applyInlineGrader(results.competencyid, userid, planid, results.scaleid);\n                        }\n\n                        // Apply Donut Graph to the competency in courses.\n                        if (results.hasrating !== false) {\n                            self.ApplyDonutGraph(results.competencyid, results, false);\n                        }\n\n                        // Apply Donut Graph to the competency in courses modules.\n                        if (results.hasratingincm !== false && self.cmcompgradingEnabled) {\n                            self.ApplyDonutGraph(results.competencyid, results, true);\n                        }\n                        self.colorContrast.apply('#comp-' + results.competencyid + ' .x_content .tile-stats .label.cr-scalename');\n                    });\n                    templates.render('report_lpmonitoring/competency_proficiency', results).done(function(html, js) {\n                        $('#comp-' + results.competencyid + ' span.level').html(html);\n                        templates.runTemplateJS(js);\n                    });\n                    // Reload plan stats.\n                    promise[2].then(function(results) {\n                        templates.render('report_lpmonitoring/plan_stats_report',\n                        {\n                            plan:results.plan,\n                            hascompetencies:true\n                        }).done(function(html, js) {\n                            $('#plan-stats-report').html(html);\n                            templates.runTemplateJS(js);\n                        });\n                    });\n                });\n            });\n\n        };\n\n        /**\n         * Apply Donut Grapth to the competency.\n         *\n         * @name   ApplyDonutGraph\n         * @param  {Number} competencyid\n         * @param  {Array} data\n         * @param  {Boolean} forcm\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.ApplyDonutGraph = function(competencyid, data, forcm) {\n            var options = {\n                legend: false,\n                responsive: false,\n                tooltips: {enabled: false}\n            };\n            var colors = [];\n            var canvasselector = '#canvas-graph-' + competencyid;\n            if (forcm) {\n                canvasselector = '#cm-canvas-graph-' + competencyid;\n            }\n\n            var itemsbyscales = [];\n            $.each(data.scalecompetencyitems, function(index, record) {\n                colors.push(record.color);\n                if (forcm) {\n                    itemsbyscales.push(record.nbcm);\n                } else {\n                    itemsbyscales.push(record.nbcourse);\n                }\n            });\n\n            new Chart($(canvasselector), {\n                type: 'doughnut',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        data: itemsbyscales,\n                        backgroundColor: colors,\n                        hoverBackgroundColor: []\n                    }]\n                },\n                options: options\n            });\n        };\n\n        /**\n         * Submit filter form.\n         *\n         * @name   submitFormHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.submitFormHandler = function() {\n            var self = this;\n            var templateSelected = $(\"#template\").is(':checked');\n            var tagSelected = $(\"#tag\").is(':checked');\n            var cohortSelected = $(\"#cohort\").is(':checked');\n\n            var templateid = null;\n            var planid = null;\n            var tagid = null;\n            var cohortid = null;\n            if (templateSelected === true) {\n                templateid = self.templateId;\n                planid = self.learningplanId;\n                self.withcomments = $(\"#filter-comment\").is(':checked');\n                self.withplans = $(\"#filter-plan\").is(':checked');\n            } else if (tagSelected === true) {\n                tagid = self.tagId;\n                planid = self.tagLearningplanId;\n            } else if (cohortSelected === true) {\n                templateid = self.templateId;\n                cohortid = self.cohortId;\n                planid = null;\n            } else {\n                // Else = \"#student\" is selected.\n                planid = self.studentLearningplanId;\n            }\n            self.scalesvaluesSelected = $(self.learningplanSelector).data('scalefilter');\n            if (self.scalefilterin === 'coursemodule') {\n                self.compDetailActiveTab = 'incoursemodule';\n            } else {\n                self.compDetailActiveTab = 'incourse';\n            }\n\n            self.displayPlan(planid, templateid, tagid, cohortid);\n        };\n\n        /**\n         * Handler on scale change.\n         *\n         * @name   changeScaleHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeScaleHandler = function() {\n            var self = this;\n            var scalefiltervalues = [];\n            $('.competencyreport .scalefiltervalues').each(function () {\n                if ($(this).is(\":checked\")) {\n                    scalefiltervalues.push({scalevalue : $(this).data(\"scalevalue\"), scaleid : $(this).data(\"scaleid\")});\n                }\n            });\n\n            if (scalefiltervalues.length > 0) {\n                $('.competencyreport input[name=optionscalefilter]').prop(\"disabled\", false);\n                $('.competencyreport input[name=optionscalesortorder]').prop(\"disabled\", false);\n\n                if ($(\"#scalefiltercourse\").is(\":not(:checked)\") && $(\"#scalefilterplan\").is(\":not(:checked)\")) {\n                    if (self.cmcompgradingEnabled) {\n                        $('#scalefiltercoursemodule').prop(\"checked\", true);\n                    } else {\n                        $('#scalefiltercourse').prop(\"checked\", true);\n                    }\n                }\n                if ($(\"#scalesortorderasc\").is(\":not(:checked)\") && $(\"#scalesortorderdesc\").is(\":not(:checked)\")) {\n                    $('#scalesortorderasc').prop(\"checked\", true);\n                }\n            } else {\n                $('.competencyreport input[name=optionscalefilter]').prop(\"checked\", false);\n                $('.competencyreport input[name=optionscalefilter]').prop(\"disabled\", true);\n\n                $('.competencyreport input[name=optionscalesortorder]').prop(\"disabled\", true);\n                $('.competencyreport input[name=optionscalesortorder]').prop(\"checked\", false);\n            }\n            self.changeScaleApplyHandler();\n            self.changeScaleSortorderHandler();\n            self.resetUserUsingLPTemplateSelection();\n            var filterscaleinputs = JSON.stringify(scalefiltervalues);\n            $(self.learningplanSelector).data('scalefilter', filterscaleinputs);\n        };\n\n        /**\n         * Handler on scale filter application change.\n         *\n         * @name   changeScaleApplyHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeScaleApplyHandler = function() {\n            var self = this;\n\n            self.scalefilterin = '';\n            if ($(\"#scalefilterplan\").is(':checked')) {\n                self.scalefilterin = '';\n            }\n            if ($(\"#scalefiltercourse\").is(':checked')) {\n                self.scalefilterin = 'course';\n            }\n            if ($(\"#scalefiltercoursemodule\").is(':checked')) {\n                self.scalefilterin = 'coursemodule';\n            }\n            $(self.learningplanSelector).data('scalefilterapply', self.scalefilterin);\n        };\n\n        /**\n         * Handler on scale sort order change.\n         *\n         * @name   changeScaleSortorderHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeScaleSortorderHandler = function() {\n            var self = this;\n            self.scalesortorder = 'ASC';\n            if ($(\"#scalesortorderdesc\").is(':checked')) {\n                self.scalesortorder = 'DESC';\n            }\n            $(self.learningplanSelector).data('scalesortorder', self.scalesortorder);\n        };\n\n        /**\n         * Handler on \"only plans with comments\" filter change.\n         *\n         * @name   changeWithcommentsHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeWithcommentsHandler = function() {\n            var self = this;\n            self.withcomments = $(\"#filter-comment\").is(':checked');\n            $(self.learningplanSelector).data('withcomments', self.withcomments);\n        };\n\n        /**\n         * Handler on \"only students with minimum two plans\" filter change.\n         *\n         * @name   changeWithplansHandler\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.changeWithplansHandler = function() {\n            var self = this;\n            self.withplans = $(\"#filter-plan\").is(':checked');\n            $(self.learningplanSelector).data('withplans', self.withplans);\n        };\n\n        /**\n         * Display the list of evidences in competency.\n         *\n         * @name   displayEvidencelist\n         * @param {Object} Evidence list\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayEvidencelist = function(evidences) {\n            var self = this;\n            if (evidences.listevidence.length > 0) {\n                str.get_string('listofevidence', 'tool_lp').done(\n                function(titledialogue) {\n                    templates.render('report_lpmonitoring/list_evidences_in_competency', evidences)\n                        .done(function(html) {\n                            // Show the dialogue.\n                            new Dialogue(\n                                titledialogue,\n                                html,\n                                function(){\n                                    DataTable.apply('#listevidencecompetency-' + evidences.competencyid, true, true);\n                                },\n                                self.destroyDialogue\n                            );\n                        }).fail(notification.exception);\n                });\n            }\n        };\n\n        /**\n         * destroy DOM after close.\n         *\n         * @param Dialogue\n         * @function\n         */\n        LearningplanReport.prototype.destroyDialogue = function(dialg) {\n            dialg.close();\n        };\n\n        /**\n         * Display the list of courses in competency.\n         *\n         * @name   displayCourselist\n         * @param {Object[]} listcourses\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayCourselist = function(listcourses) {\n            var self = this;\n            if (listcourses.listtotalcourses.length > 0) {\n                str.get_string('linkedcourses', 'tool_lp').done(\n                function(titledialogue) {\n                    templates.render('report_lpmonitoring/list_courses_in_competency', listcourses)\n                        .done(function(html) {\n                            // Show the dialogue.\n                            new Dialogue(\n                                titledialogue,\n                                html,\n                                function(){\n                                    DataTable.apply('#listcoursecompetency-' + listcourses.competencyid, true, true);\n                                },\n                                self.destroyDialogue\n                            );\n                        }).fail(notification.exception);\n                });\n            }\n        };\n\n        /**\n         * Display the list of courses modules in competency.\n         *\n         * @name   displayCmlist\n         * @param {Object[]} listcms\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayCmlist = function(listcms) {\n            var self = this;\n            if (listcms.listtotalcms.length > 0) {\n                str.get_string('linkedcms', 'report_lpmonitoring').done(\n                function(titledialogue) {\n                    templates.render('report_lpmonitoring/list_cms_in_competency', listcms)\n                        .done(function(html) {\n                            // Show the dialogue.\n                            new Dialogue(\n                                titledialogue,\n                                html,\n                                function(){\n                                    DataTable.apply('#listcmcompetency-' + listcms.competencyid, true, true);\n                                },\n                                self.destroyDialogue\n                            );\n                        }).fail(notification.exception);\n                });\n            }\n        };\n\n        /**\n         * Display plan.\n         *\n         * @name   displayPlan\n         * @param {Number} planid The learning plan ID\n         * @param {Number} templateid The learning plan template ID\n         * @param {Number} tagid The learning plan tag ID\n         * @param {Number} cohortid The cohort ID\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayPlan = function(planid, templateid, tagid, cohortid) {\n            var elementloading = null,\n                    self = this;\n            if($('#plan-user-info').length) {\n                elementloading = $('#plan-user-info');\n            } else {\n                elementloading = $(\"#reportFilter button\");\n            }\n            elementloading.addClass('loading');\n            // Hide collapse links as long as the competencies details are not displayed.\n            $('.competencyreport .competency-detail a.collapse-link').css('visibility', 'hidden');\n\n            // Set scales values empty if not defined.\n            self.scalesvaluesSelected = self.userView === false ? self.scalesvaluesSelected : \"\";\n\n            var promise = ajax.call([{\n                methodname: 'report_lpmonitoring_read_plan',\n                args: {\n                    planid: parseInt(planid),\n                    templateid: parseInt(templateid),\n                    scalevalues: self.scalesvaluesSelected,\n                    scalefilterin: self.scalefilterin,\n                    scalesortorder: self.scalesortorder,\n                    tagid: parseInt(tagid),\n                    cohortid: parseInt(cohortid),\n                    withcomments: self.withcomments,\n                    withplans: self.withplans\n                }\n            }]);\n            promise[0].then(function(results) {\n                results.templateid = parseInt(templateid);\n                M.cfg.contextid = results.plan.usercontext;\n                if (results.hasnavigation === false) {\n                    $('.plan-info-container').addClass('nonavigation');\n                } else {\n                    $('.plan-info-container').removeClass('nonavigation');\n                }\n                // State of navigation.\n                results.navigationclosed = false;\n                if ($('.plan-info-container').hasClass('closed')) {\n                    results.navigationclosed = true;\n                }\n                if (self.userView === false) {\n                    return templates.render('report_lpmonitoring/user_info', results).done(function(html) {\n                        $(\"#userInfoContainer\").html(html);\n                        self.loadListCompetencies(results.plan, elementloading);\n                        return templates.render('report_lpmonitoring/users_list_navigation', results).done(function(html) {\n                            $(\"#users-list-full-navigation\").html(html);\n                        });\n                    });\n                } else {\n                    str.get_string('learningplancompetencies', 'report_lpmonitoring', results.plan.name).done(function(planname) {\n                        $('#planInfoContainer h3').text(planname);\n                        self.loadListCompetencies(results.plan, elementloading);\n                    });\n                }\n            }).fail(\n                    function(exp) {\n                        elementloading.removeClass('loading');\n                        if (exp.errorcode === 'emptytemplate') {\n                            var exception = {exception:exp};\n                            return templates.render('report_lpmonitoring/user_info', exception).done(function(html) {\n                                $(\"#userInfoContainer\").html(html);\n                                $(\"#listPlanCompetencies\").empty();\n                                $(\"#plan-stats-report\").empty();\n                                $(\"#report-content\").empty();\n                                $(\"#summary-content\").empty();\n                                $(\"#nav-tabs\").hide();\n                                $(\"#users-list-full-navigation\").empty();\n                            });\n                        } else {\n                            notification.exception(exp);\n                        }\n                    }\n                );\n        };\n\n        /**\n         * Display the list of courses in competency.\n         *\n         * @name   displayScaleCourseList\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayScaleCourseList = function(listcourses) {\n            var self = this;\n            if (listcourses.scalecompetencyitem.listcourses.length > 0) {\n                str.get_string('linkedcourses', 'tool_lp').done(\n                function(titledialogue) {\n                    templates.render('report_lpmonitoring/list_courses_in_scale_value', listcourses)\n                        .done(function(html) {\n                            // Show the dialogue.\n                            new Dialogue(\n                                titledialogue,\n                                html,\n                                function(){\n                                    DataTable.apply('#listscalecoursecompetency-' + listcourses.competencyid, true, true);\n                                },\n                                self.destroyDialogue\n                            );\n                            self.colorContrast.apply('.moodle-dialogue-base .label.cr-scalename');\n                        }).fail(notification.exception);\n                });\n            }\n        };\n\n        /**\n         * Display the list of courses modules in competency.\n         *\n         * @name   displayScaleCmList\n         * @param {Object[]} listitems\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.displayScaleCmList = function(listitems) {\n            var self = this;\n            if (listitems.scalecompetencyitem.listcms.length > 0) {\n                str.get_string('linkedcms', 'report_lpmonitoring').done(\n                function(titledialogue) {\n                    templates.render('report_lpmonitoring/list_cms_in_scale_value', listitems)\n                        .done(function(html) {\n                            // Show the dialogue.\n                            new Dialogue(\n                                titledialogue,\n                                html,\n                                function(){\n                                    DataTable.apply('#listscalecmcompetency-' + listitems.competencyid, true, true);\n                                },\n                                self.destroyDialogue\n                            );\n                            self.colorContrast.apply('.moodle-dialogue-base .label.cr-scalename');\n                        }).fail(notification.exception);\n                });\n            }\n        };\n\n        /**\n         * Reset grade for one competency.\n         *\n         * @name   resetGrade\n         * @param  {Number} planid\n         * @param  {Number} userid\n         * @param  {Number} competencyid or null for all competencies of this plan\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.resetGrade = function(planid, userid, competencyid) {\n            var self = this;\n            var allcompetencies = false;\n            if (competencyid === null) {\n                allcompetencies = true;\n            }\n            var dialogue = new ResetGradeDialogue(allcompetencies);\n            dialogue.on('rated', function(e, data) {\n                var promise = ajax.call([{\n                    methodname: 'report_lpmonitoring_reset_grading',\n                    args: {\n                        planid: planid,\n                        competencyid: competencyid,\n                        note: data.note\n                    }\n                }]);\n\n                promise[0].then(function() {\n                    if (competencyid === null) {\n                        self.displayPlan(planid, self.templateId, self.tagId, self.cohortId);\n                    } else {\n                        self.reloadCompetencyDetail(competencyid, userid, planid);\n                    }\n                }).fail(\n                    function(exp) {\n                        notification.exception(exp);\n                    }\n                );\n            });\n            dialogue.display();\n        };\n\n        /**\n         * Init the differents page blocks and inputs form.\n         *\n         * @name   initPage\n         * @return {Void}\n         * @function\n         */\n        LearningplanReport.prototype.initPage = function() {\n            var self = this;\n            str.get_strings([\n                { key: 'selectuser', component: 'report_lpmonitoring' },\n                { key: 'nouserselected', component: 'report_lpmonitoring' },\n                { key: 'selectcohort', component: 'report_lpmonitoring' },\n                { key: 'nocohortselected', component: 'report_lpmonitoring' },\n            ]\n            ).done(\n                function (strings) {\n                    // Autocomplete users in templates.\n                    autocomplete.enhance(\n                        self.learningplanSelector,\n                        false,\n                        'report_lpmonitoring/learningplan',\n                        strings[0],\n                        false,\n                        true,\n                        strings[1]);\n                    // Autocomplete users.\n                    autocomplete.enhance(\n                        self.studentSelector,\n                        false,\n                        'tool_lp/form-user-selector',\n                        strings[0],\n                        false,\n                        true,\n                        strings[1]);\n                    // Autocomplete cohort.\n                    autocomplete.enhance(\n                        self.cohortSelector,\n                        false,\n                        'tool_lp/form-cohort-selector',\n                        strings[2],\n                        false,\n                        true,\n                        strings[3]);\n\n                    if (self.userView === false) {\n                        if ($('.competencyreport #student').is(':checked')) {\n                            $('.competencyreport .templatefilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .tagfilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .cohortfilter').toggleClass('disabled-option', true);\n                        } else if ($('.competencyreport #tag').is(':checked')) {\n                            $('.competencyreport .studentfilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .templatefilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .cohortfilter').toggleClass('disabled-option', true);\n                        } else if ($('.competencyreport #cohort').is(':checked')) {\n                            $('.competencyreport .studentfilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .templatefilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .tagfilter').toggleClass('disabled-option', true);\n                        } else {\n                            $('.competencyreport .studentfilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .tagfilter').toggleClass('disabled-option', true);\n                            $('.competencyreport .cohortfilter').toggleClass('disabled-option', true);\n                        }\n                    }\n                    self.checkDataFormReady();\n                }\n            ).fail(notification.exception);\n            $(\".competencyreport\").on('click', '.moreless-toggler', function(event) {\n                event.preventDefault();\n                $(\".advanced\").toggle();\n                $(this).toggleClass(\"hidden\").siblings().removeClass('hidden');\n            });\n\n            // Allow collapse of block panels.\n            fieldsettoggler.init();\n\n            // Collapse block panels.\n            $(\".competencyreport\").on('click', '.collapse-link', function(event) {\n                event.preventDefault();\n                var e = $(this).closest(\".x_panel\"),\n                t = $(this).find(\"i\"),\n                n = e.find(\".x_content\");\n                t.toggleClass(\"fa-chevron-right fa-chevron-down\");\n                n.slideToggle();\n                e.toggleClass(\"panel-collapsed\");\n            });\n\n            // Handle click on scale number courses.\n            $(\".competencyreport\").on('click', 'a.scaleinfo', function(event) {\n                event.preventDefault();\n                var competencyid = $(this).data(\"competencyid\");\n                var scalevalue = $(this).data(\"scalevalue\");\n                var type = $(this).data(\"type\");\n\n                if (typeof self.competencies[competencyid] !== 'undefined') {\n                    var listitems = {};\n                    var competencydetail = self.competencies[competencyid].competencydetail;\n                    listitems.scalecompetencyitem = competencydetail.scalecompetencyitems[scalevalue - 1];\n                    listitems.competencyid = competencyid;\n                    if (type === 'incm') {\n                        self.displayScaleCmList(listitems);\n                    } else {\n                        self.displayScaleCourseList(listitems);\n                    }\n                }\n            });\n\n            $('.competencyreport #student').on('change', function(){\n                if ($(this).is(':checked')){\n                    $('.competencyreport .studentfilter').toggleClass('disabled-option', false);\n                    $('.competencyreport .templatefilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .tagfilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .cohortfilter').toggleClass('disabled-option', true);\n                }\n                self.checkDataFormReady();\n            });\n\n            $('.competencyreport #template').on('change', function(){\n                if ($(this).is(':checked')){\n                    $('.competencyreport .studentfilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .templatefilter').toggleClass('disabled-option', false);\n                    $('.competencyreport .tagfilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .cohortfilter').toggleClass('disabled-option', true);\n                }\n                self.checkDataFormReady();\n            });\n\n            $('.competencyreport #tag').on('change', function(){\n                if ($(this).is(':checked')){\n                    self.loadTags();\n                    $('.competencyreport .studentfilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .templatefilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .tagfilter').toggleClass('disabled-option', false);\n                    $('.competencyreport .cohortfilter').toggleClass('disabled-option', true);\n                }\n                self.checkDataFormReady();\n            });\n\n            $('.competencyreport #cohort').on('change', function(){\n                if ($(this).is(':checked')){\n                    self.loadTags();\n                    $('.competencyreport .studentfilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .templatefilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .tagfilter').toggleClass('disabled-option', true);\n                    $('.competencyreport .cohortfilter').toggleClass('disabled-option', false);\n                }\n                self.checkDataFormReady();\n            });\n\n            // Filter form submit.\n            $(document).on('submit', '#reportFilter', function(){\n                self.submitFormHandler();\n                return false;\n            });\n\n            // User plan navigation.\n            $(\".competencyreport\").on('click', 'a.navigatetoplan', function(event) {\n                event.preventDefault();\n                var planid = $(this).data('planid');\n                var templateid = $(this).data('templateid');\n                var tagid = $(this).data('tagid');\n                var cohortid = $(this).data('cohortid');\n                self.displayPlan(planid, templateid, tagid, cohortid);\n            });\n\n            // User plan full navigation.\n            $(\".competencyreport\").on('click', '.toggle-lp-list-users', function(event) {\n                event.preventDefault();\n                $(this).find('i.angle').toggleClass('fa-angle-double-right fa-angle-double-left');\n                $(this).closest('.plan-info-container').toggleClass('closed');\n                $('div[data-region=\"blocks-lp-list-users\"]').toggleClass('lp-list-users-closed');\n            });\n            var tmpselector = '.plan-info-container .table-list-users .nav-list-users-displayinfo';\n            $(\".competencyreport\").on('click', tmpselector, function(event) {\n                event.stopPropagation();\n                event.preventDefault();\n                $(this).find('i.fa').toggleClass('fa-angle-down fa-angle-up');\n                $(this).parent().find('span.item-nav-list-users-info').toggleClass('hidden');\n            });\n            $(\".competencyreport\").on('click', '.plan-info-container .table-list-users tr', function(event) {\n                event.preventDefault();\n                var planid = $(this).data('planid');\n                var templateid = $(this).data('templateid');\n                var tagid = $(this).data('tagid');\n                var cohortid = $(this).data('cohortid');\n                self.displayPlan(planid, templateid, tagid, cohortid);\n            });\n\n            // Handle click on list evidence.\n            $(\".competencyreport\").on('click', 'a.listevidence', function(event) {\n                event.preventDefault();\n                var competencyid = $(this).data('competencyid');\n                if (typeof self.competencies[competencyid] !== 'undefined') {\n                    var listevidence = {};\n                    listevidence.listevidence = self.competencies[competencyid].competencydetail.listevidence;\n                    listevidence.competencyid = competencyid;\n                    self.displayEvidencelist(listevidence);\n                }\n            });\n\n            // Handle click on total number courses.\n            $(\".competencyreport\").on('click', 'a.totalnbcourses', function(event) {\n                event.preventDefault();\n                var competencyid = $(this).data('competencyid');\n                if (typeof self.competencies[competencyid] !== 'undefined') {\n                    var totallistcourses = {};\n                    totallistcourses.listtotalcourses = self.competencies[competencyid].competencydetail.listtotalcourses;\n                    totallistcourses.competencyid = competencyid;\n                    self.displayCourselist(totallistcourses);\n                }\n            });\n\n            // Handle click on total number of courses modules.\n            $(\".competencyreport\").on('click', 'a.totalnbcms', function(event) {\n                event.preventDefault();\n                var competencyid = $(this).data('competencyid');\n                if (typeof self.competencies[competencyid] !== 'undefined') {\n                    var totallistcms = {};\n                    totallistcms.listtotalcms = self.competencies[competencyid].competencydetail.listtotalcms;\n                    totallistcms.competencyid = competencyid;\n                    self.displayCmlist(totallistcms);\n                }\n            });\n            // Handle click on rating tabs.\n            $(\".competencyreport\").on('click', '.detail-comp-tab a', function(event) {\n                event.preventDefault();\n                if ($(event.target).hasClass('incm')) {\n                    self.compDetailActiveTab = \"incoursemodule\";\n                } else {\n                    self.compDetailActiveTab = \"incourse\";\n                }\n            });\n\n            // Handle click on reset display rating.\n            $(\".competencyreport\").on('click', '.resetdisplayrating a', function(event) {\n                event.preventDefault();\n                var planid = $(this).data('canresetdisplayrating-plan');\n                self.resetDisplayRating(planid);\n            });\n\n            // Handle click on reset one competency.\n            $(\".competencyreport\").on('click', '.reset-grade a', function(event) {\n                event.preventDefault();\n                var planid = $(this).data('resetgrade-plan');\n                var competencyid = $(this).data('competencyid');\n                var userid = $(this).data('userid');\n                self.resetGrade(planid, userid, competencyid);\n            });\n\n            // Handle click on reset all competencies.\n            $(\".competencyreport\").on('click', '.reset-grade-all a', function(event) {\n                event.preventDefault();\n                var planid = $(this).data('resetgrade-plan');\n                var userid = $(this).data('userid');\n                self.resetGrade(planid, userid, null);\n            });\n\n            // Collapse/Expand all.\n            str.get_strings([\n                { key: 'collapseall'},\n                { key: 'expandall'}]\n            ).done(\n                function (strings) {\n                    var collapseall = strings[0];\n                    var expandall = strings[1];\n                    $(\".competencyreport\").on('click', '.collapsible-actions a', function(event) {\n                        event.preventDefault();\n                        if ($(this).hasClass('collapse-all')) {\n                            $(this).text(expandall);\n                            $('#listPlanCompetencies div.x_panel:not(.panel-collapsed) a.collapse-link').trigger('click');\n                        } else {\n                            $(this).text(collapseall);\n                            $('#listPlanCompetencies div.panel-collapsed a.collapse-link').trigger('click');\n                        }\n                        $(this).toggleClass(\"collapse-all expand-all\");\n                    });\n                }\n            ).fail(notification.exception);\n        };\n\n        return {\n            /**\n             * Main initialisation.\n             *\n             * @param {Boolean} True if the report is for user view (student).\n             * @param {Boolean} cmcompgradingenabled True if grading in course module competency is enabled.\n             * @return {LearningplanReport} A new instance of LearningplanReport.\n             * @method init\n             */\n            init: function(userview, cmcompgradingenabled) {\n                return new LearningplanReport(userview, cmcompgradingenabled);\n            },\n            /**\n             * Process result autocomplete.\n             *\n             * @param {type} selector\n             * @param {type} results\n             * @returns {Array}\n             */\n            processResults: function(selector, results) {\n                var users = [];\n                $.each(results, function(index, userplan) {\n                    users.push({\n                        value: userplan.planid,\n                        label: userplan._label\n                    });\n                });\n                return users;\n            },\n\n            /**\n             * Transport method for autocomplete.\n             *\n             * @param {type} selector\n             * @param {type} query\n             * @param {type} success\n             * @param {type} failure\n             * @returns {undefined}\n             */\n            transport: function(selector, query, success, failure) {\n                var promise;\n                var scalefilterapply = $(selector).data('scalefilterapply');\n                var scalesortorder = $(selector).data('scalesortorder');\n                scalesortorder = scalesortorder ? scalesortorder : 'ASC';\n                var withcomments = $(selector).data('withcomments');\n                withcomments = withcomments ? withcomments : false;\n                var withplans = $(selector).data('withplans');\n                withplans = withplans ? withplans : false;\n                var templateid = $(selector).data('templateid');\n                if (templateid === '') {\n                    return [];\n                }\n\n                promise = ajax.call([{\n                    methodname: 'report_lpmonitoring_search_users_by_templateid',\n                    args: {\n                        query: query,\n                        templateid: parseInt(templateid),\n                        scalevalues: $(selector).data('scalefilter'),\n                        scalefilterin: scalefilterapply,\n                        scalesortorder: scalesortorder,\n                        withcomments: withcomments,\n                        withplans: withplans\n                    }\n                }]);\n\n                promise[0].then(function(results) {\n                    var promises = [],\n                        i = 0;\n                    // Render the label.\n                    $.each(results, function(index, user) {\n                        var ctx = user,\n                            identity = [];\n                        $.each(['idnumber', 'email', 'phone1', 'phone2', 'department', 'institution'], function(i, k) {\n                            if (typeof user[k] !== 'undefined' && user[k] !== '') {\n                                ctx.hasidentity = true;\n                                identity.push(user[k]);\n                            }\n                        });\n                        ctx.identity = identity.join(', ');\n                        promises.push(templates.render('report_lpmonitoring/form-user-selector-suggestion', ctx));\n                    });\n\n                    // Apply the label to the results.\n                    return $.when.apply($.when, promises).then(function() {\n                        var args = arguments;\n                        $.each(results, function(index, user) {\n                            user._label = args[i];\n                            i++;\n                        });\n                        success(results);\n                    });\n\n                }, failure);\n            }\n        };\n\n    });\n"],"names":["define","$","templates","ajax","notification","str","Chart","autocomplete","Dialogue","Popup","InlineGrader","fieldsettoggler","colorcontrast","DataTable","ResetGradeDialogue","LearningplanReport","userview","cmcompgradingenabled","userView","cmcompgradingEnabled","initPage","colorContrast","init","learningplan","this","_refresh","reloadCompetencyDetail","_competencyId","_userId","_planId","close","templateSelector","on","templateChangeHandler","bind","change","learningplanSelector","learningplanChangeHandler","studentSelector","studentChangeHandler","cohortSelector","cohortChangeHandler","cohortTemplateSelector","cohortTemplateHandler","studentPlansSelector","studentPlansChangeHandler","tagSelector","tagChangeHandler","learningplanTagSelector","learningplanTagChangeHandler","learningplanTagCommentsSelector","changeScaleApplyHandler","changeScaleSortorderHandler","changeScaleHandler","prop","changeDisplayRating","changeWithcommentsHandler","changeWithplansHandler","reloadTagsIfNeeded","prototype","templateId","learningplanId","studentLearningplanId","cohortLearningplanId","tagLearningplanId","tagId","cohortId","userId","templateSelected","studentSelected","competencies","scalesvaluesSelected","scalefilterin","scalesortorder","withcomments","withplans","tagsAreLoading","compDetailActiveTab","e","target","val","data","resetUserUsingLPTemplateSelection","removeClass","hasClass","show","loadScalesFromTemplate","addClass","hide","empty","checkDataFormReady","loadTags","self","remove","call","methodname","args","then","results","get_string","done","selecttag","append","text","each","index","tag","id","length","fail","exp","exception","event","preventDefault","is","tagid","label","oldTagLearningplanId","selectlearningplan","plan","fullname","planname","planid","selectorOption","nolearningplanavailable","trigger","displayrating","promise","visible","canresetdisplayrating","resetDisplayRating","selection","find","nouserselected","templateid","parseInt","context","scales","render","html","js","runTemplateJS","buildLearningplanOptions","options","scaleSelector","key","value","name","userid","cohortid","selecttemplate","cohortTemplateselector","nocohorttemplateavailable","conditionByTemplate","conditionStudent","conditionByTag","conditionCohort","removeAttr","attr","loadListCompetencies","elementloading","competencies_list","hascompetencies","loadCompetencyDetail","loadSummaryTab","loadReportTab","element","requests","record","competency","usercompetency","push","competencyid","user","promises","competencydetail","compid","scaleid","tab","cangrade","applyInlineGrader","hasrating","ApplyDonutGraph","hasratingincms","css","apply","reportinfos","checkedvalue","filterchecked_course","filterchecked_module","filterchecked_both","tablesearchvalue","tablesearchvaluecolumn","scalefilterreport","scaleselected","i","scale_competency","searchvalue","chooserateoption","scalevalues","hasratingincm","forcm","colors","canvasselector","itemsbyscales","scalecompetencyitems","color","nbcm","nbcourse","type","labels","datasets","backgroundColor","hoverBackgroundColor","legend","responsive","tooltips","enabled","submitFormHandler","tagSelected","cohortSelected","displayPlan","scalefiltervalues","scalevalue","filterscaleinputs","JSON","stringify","displayEvidencelist","evidences","listevidence","titledialogue","destroyDialogue","dialg","displayCourselist","listcourses","listtotalcourses","displayCmlist","listcms","listtotalcms","M","cfg","contextid","usercontext","hasnavigation","navigationclosed","errorcode","displayScaleCourseList","scalecompetencyitem","displayScaleCmList","listitems","resetGrade","allcompetencies","dialogue","note","display","get_strings","component","strings","enhance","toggleClass","toggle","siblings","closest","t","n","slideToggle","document","stopPropagation","parent","totallistcourses","totallistcms","collapseall","expandall","processResults","selector","users","userplan","_label","transport","query","success","failure","scalefilterapply","ctx","identity","k","hasidentity","join","when","arguments"],"mappings":"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"}